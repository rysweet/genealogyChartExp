{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/genealogyChartExp/my-genealogy-app/src/components/GenealogyChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport PersonEditForm from \"./PersonEditForm\";\n\n// Geometry\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RING_WIDTH = 60; // radial width for each generation ring\nconst ARC_PADDING = 0; // gap in degrees between arc segments\nconst CENTER_RADIUS = 30; // radius for the center circle\n\n// Text\nconst DEFAULT_FONT_SIZE = 8; // base font size (px)\nconst LINE_SPACING = 10; // radial offset between lines in multi-line wrap\n\n/**\n * Create a color scale from dark forest green (#228B22)\n * to a light green (#ccffcc). Adjust the colors if you like.\n */\nfunction createColorScale(maxGenerations) {\n  return d3.scaleLinear().domain([0, maxGenerations - 1]).range([\"#228B22\", \"#ccffcc\"]);\n}\nexport default function GenealogyChart({\n  people,\n  maxGenerations,\n  centerPersonId,\n  onUpdatePeople\n}) {\n  _s();\n  const [selectedPersonId, setSelectedPersonId] = useState(null);\n  const svgRef = useRef(null);\n  useEffect(() => {\n    if (!people || people.length === 0) return;\n    drawChart();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [people, maxGenerations]);\n\n  // -- Text Utilities --\n\n  function approximateTextWidth(str, fontSize = DEFAULT_FONT_SIZE) {\n    const avgCharWidth = fontSize * 0.6;\n    return str.length * avgCharWidth;\n  }\n  function wrapTextToWidth(str, arcLength, fontSize = DEFAULT_FONT_SIZE) {\n    const words = str.split(\" \");\n    const lines = [];\n    let currentLineWords = [];\n    for (let i = 0; i < words.length; i++) {\n      const testLine = [...currentLineWords, words[i]].join(\" \");\n      const testWidth = approximateTextWidth(testLine, fontSize);\n      if (testWidth <= arcLength) {\n        currentLineWords.push(words[i]);\n      } else {\n        lines.push(currentLineWords.join(\" \"));\n        currentLineWords = [words[i]];\n      }\n    }\n    if (currentLineWords.length > 0) {\n      lines.push(currentLineWords.join(\" \"));\n    }\n    return lines;\n  }\n\n  // -- Main Drawing Function --\n\n  function drawChart() {\n    const width = 800;\n    const height = 800;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n    const svg = d3.select(svgRef.current).attr(\"width\", width).attr(\"height\", height);\n    const colorScale = createColorScale(maxGenerations);\n\n    // Map of id -> person\n    const peopleMap = new Map(people.map(p => [p.id, p]));\n\n    // BFS arrays\n    const ancestors = [];\n    for (let i = 0; i < maxGenerations; i++) {\n      ancestors[i] = new Array(2 ** i).fill(null);\n    }\n    ancestors[0][0] = centerPersonId;\n    for (let i = 0; i < maxGenerations - 1; i++) {\n      const size = 2 ** i;\n      for (let j = 0; j < size; j++) {\n        const pid = ancestors[i][j];\n        if (!pid) continue;\n        const person = peopleMap.get(pid);\n        if (!person) continue;\n        if (person.parents && person.parents.length > 0) {\n          ancestors[i + 1][2 * j] = person.parents[0] || null;\n        }\n        if (person.parents && person.parents.length > 1) {\n          ancestors[i + 1][2 * j + 1] = person.parents[1] || null;\n        }\n      }\n    }\n\n    // 1) Center Circle\n    const centerPerson = peopleMap.get(centerPersonId);\n    svg.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", CENTER_RADIUS).attr(\"fill\", colorScale(0)) // darkest green\n    .attr(\"stroke\", \"#333\").on(\"click\", () => {\n      setSelectedPersonId(centerPersonId);\n    });\n    svg.append(\"text\").attr(\"x\", centerX).attr(\"y\", centerY + 4).attr(\"text-anchor\", \"middle\").style(\"font-size\", DEFAULT_FONT_SIZE + \"px\").style(\"fill\", \"#fff\").text(centerPerson ? centerPerson.firstName + \" \" + centerPerson.lastName : \"Unknown\");\n\n    // 2) Concentric Arcs\n    for (let i = 1; i < maxGenerations; i++) {\n      const genArray = ancestors[i];\n      const segmentCount = 2 ** i;\n      const arcAngle = 2 * Math.PI / segmentCount - ARC_PADDING * Math.PI / 180;\n      const innerRadius = (i - 1) * RING_WIDTH + CENTER_RADIUS;\n      const outerRadius = i * RING_WIDTH + CENTER_RADIUS;\n      const arcFillColor = colorScale(i);\n      for (let k = 0; k < segmentCount; k++) {\n        const personId = genArray[k];\n        const startAngle = k * (2 * Math.PI / segmentCount);\n        const endAngle = startAngle + arcAngle;\n        const arcGenerator = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle);\n        if (!personId) {\n          svg.append(\"path\").attr(\"transform\", `translate(${centerX},${centerY})`).attr(\"d\", arcGenerator).attr(\"fill\", \"#eee\").attr(\"stroke\", \"#ccc\");\n          continue;\n        }\n        svg.append(\"path\").attr(\"transform\", `translate(${centerX},${centerY})`).attr(\"d\", arcGenerator).attr(\"fill\", arcFillColor).attr(\"stroke\", \"#333\").on(\"click\", () => {\n          setSelectedPersonId(personId);\n        });\n        let label = \"Unknown\";\n        const person = peopleMap.get(personId);\n        if (person) {\n          label = person.firstName + \" \" + person.lastName + \" (\" + person.birthDate + \" - \" + person.deathDate + \")\";\n        }\n        const midRadius = (innerRadius + outerRadius) / 2;\n        const angleDiff = Math.abs(endAngle - startAngle);\n        const arcLength = angleDiff * midRadius;\n        const lines = wrapTextToWidth(label, arcLength, DEFAULT_FONT_SIZE);\n        const numLines = lines.length;\n        const totalHeight = (numLines - 1) * LINE_SPACING;\n        const outermostRadius = midRadius + totalHeight / 2;\n        for (let idx = 0; idx < numLines; idx++) {\n          const lineText = lines[idx];\n          const lineRadius = outermostRadius - idx * LINE_SPACING;\n          const lineArcGen = d3.arc().innerRadius(lineRadius).outerRadius(lineRadius).startAngle(startAngle).endAngle(endAngle);\n          const textPathId = `textPath-${i}-${k}-line${idx}`;\n          svg.append(\"defs\").append(\"path\").attr(\"id\", textPathId).attr(\"transform\", `translate(${centerX},${centerY})`).attr(\"d\", lineArcGen());\n          const lineArcLength = angleDiff * lineRadius;\n          svg.append(\"text\").style(\"font-size\", DEFAULT_FONT_SIZE + \"px\").style(\"fill\", \"#fff\").append(\"textPath\").attr(\"xlink:href\", \"#\" + textPathId).attr(\"startOffset\", lineArcLength / 2 + \"px\").style(\"text-anchor\", \"middle\").text(lineText);\n        }\n      }\n    }\n  }\n\n  // Editing form logic\n  const handleEditSave = updatedPerson => {\n    onUpdatePeople(prev => prev.map(p => p.id === updatedPerson.id ? updatedPerson : p));\n    setSelectedPersonId(null);\n  };\n  const handleEditCancel = () => {\n    setSelectedPersonId(null);\n  };\n  const selectedPerson = people.find(p => p.id === selectedPersonId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), selectedPerson && /*#__PURE__*/_jsxDEV(PersonEditForm, {\n      person: selectedPerson,\n      onSave: handleEditSave,\n      onCancel: handleEditCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n}\n_s(GenealogyChart, \"HkK2Qgqlq1AU8O8gVdur7h43CwU=\");\n_c = GenealogyChart;\nvar _c;\n$RefreshReg$(_c, \"GenealogyChart\");","map":{"version":3,"names":["React","useState","useRef","useEffect","d3","PersonEditForm","jsxDEV","_jsxDEV","RING_WIDTH","ARC_PADDING","CENTER_RADIUS","DEFAULT_FONT_SIZE","LINE_SPACING","createColorScale","maxGenerations","scaleLinear","domain","range","GenealogyChart","people","centerPersonId","onUpdatePeople","_s","selectedPersonId","setSelectedPersonId","svgRef","length","drawChart","approximateTextWidth","str","fontSize","avgCharWidth","wrapTextToWidth","arcLength","words","split","lines","currentLineWords","i","testLine","join","testWidth","push","width","height","centerX","centerY","select","current","selectAll","remove","svg","attr","colorScale","peopleMap","Map","map","p","id","ancestors","Array","fill","size","j","pid","person","get","parents","centerPerson","append","on","style","text","firstName","lastName","genArray","segmentCount","arcAngle","Math","PI","innerRadius","outerRadius","arcFillColor","k","personId","startAngle","endAngle","arcGenerator","arc","label","birthDate","deathDate","midRadius","angleDiff","abs","numLines","totalHeight","outermostRadius","idx","lineText","lineRadius","lineArcGen","textPathId","lineArcLength","handleEditSave","updatedPerson","prev","handleEditCancel","selectedPerson","find","position","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onSave","onCancel","_c","$RefreshReg$"],"sources":["/Users/ryan/genealogyChartExp/my-genealogy-app/src/components/GenealogyChart.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport PersonEditForm from \"./PersonEditForm\";\n\n// Geometry\nconst RING_WIDTH = 60;           // radial width for each generation ring\nconst ARC_PADDING = 0;           // gap in degrees between arc segments\nconst CENTER_RADIUS = 30;        // radius for the center circle\n\n// Text\nconst DEFAULT_FONT_SIZE = 8;     // base font size (px)\nconst LINE_SPACING = 10;         // radial offset between lines in multi-line wrap\n\n/**\n * Create a color scale from dark forest green (#228B22)\n * to a light green (#ccffcc). Adjust the colors if you like.\n */\nfunction createColorScale(maxGenerations) {\n  return d3.scaleLinear()\n    .domain([0, maxGenerations - 1])\n    .range([\"#228B22\", \"#ccffcc\"]);\n}\n\nexport default function GenealogyChart({\n  people,\n  maxGenerations,\n  centerPersonId,\n  onUpdatePeople\n}) {\n  const [selectedPersonId, setSelectedPersonId] = useState(null);\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    if (!people || people.length === 0) return;\n    drawChart();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [people, maxGenerations]);\n\n  // -- Text Utilities --\n\n  function approximateTextWidth(str, fontSize = DEFAULT_FONT_SIZE) {\n    const avgCharWidth = fontSize * 0.6;\n    return str.length * avgCharWidth;\n  }\n\n  function wrapTextToWidth(str, arcLength, fontSize = DEFAULT_FONT_SIZE) {\n    const words = str.split(\" \");\n    const lines = [];\n    let currentLineWords = [];\n\n    for (let i = 0; i < words.length; i++) {\n      const testLine = [...currentLineWords, words[i]].join(\" \");\n      const testWidth = approximateTextWidth(testLine, fontSize);\n\n      if (testWidth <= arcLength) {\n        currentLineWords.push(words[i]);\n      } else {\n        lines.push(currentLineWords.join(\" \"));\n        currentLineWords = [words[i]];\n      }\n    }\n    if (currentLineWords.length > 0) {\n      lines.push(currentLineWords.join(\" \"));\n    }\n    return lines;\n  }\n\n  // -- Main Drawing Function --\n\n  function drawChart() {\n    const width = 800;\n    const height = 800;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n    const svg = d3.select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const colorScale = createColorScale(maxGenerations);\n\n    // Map of id -> person\n    const peopleMap = new Map(people.map((p) => [p.id, p]));\n\n    // BFS arrays\n    const ancestors = [];\n    for (let i = 0; i < maxGenerations; i++) {\n      ancestors[i] = new Array(2 ** i).fill(null);\n    }\n    ancestors[0][0] = centerPersonId;\n\n    for (let i = 0; i < maxGenerations - 1; i++) {\n      const size = 2 ** i;\n      for (let j = 0; j < size; j++) {\n        const pid = ancestors[i][j];\n        if (!pid) continue;\n        const person = peopleMap.get(pid);\n        if (!person) continue;\n\n        if (person.parents && person.parents.length > 0) {\n          ancestors[i + 1][2 * j] = person.parents[0] || null;\n        }\n        if (person.parents && person.parents.length > 1) {\n          ancestors[i + 1][2 * j + 1] = person.parents[1] || null;\n        }\n      }\n    }\n\n    // 1) Center Circle\n    const centerPerson = peopleMap.get(centerPersonId);\n    svg.append(\"circle\")\n      .attr(\"cx\", centerX)\n      .attr(\"cy\", centerY)\n      .attr(\"r\", CENTER_RADIUS)\n      .attr(\"fill\", colorScale(0)) // darkest green\n      .attr(\"stroke\", \"#333\")\n      .on(\"click\", () => {\n        setSelectedPersonId(centerPersonId);\n      });\n\n    svg.append(\"text\")\n      .attr(\"x\", centerX)\n      .attr(\"y\", centerY + 4)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", DEFAULT_FONT_SIZE + \"px\")\n      .style(\"fill\", \"#fff\")\n      .text(\n        centerPerson\n          ? centerPerson.firstName + \" \" + centerPerson.lastName\n          : \"Unknown\"\n      );\n\n    // 2) Concentric Arcs\n    for (let i = 1; i < maxGenerations; i++) {\n      const genArray = ancestors[i];\n      const segmentCount = 2 ** i;\n      const arcAngle = (2 * Math.PI) / segmentCount - (ARC_PADDING * Math.PI) / 180;\n\n      const innerRadius = (i - 1) * RING_WIDTH + CENTER_RADIUS;\n      const outerRadius = i * RING_WIDTH + CENTER_RADIUS;\n\n      const arcFillColor = colorScale(i);\n\n      for (let k = 0; k < segmentCount; k++) {\n        const personId = genArray[k];\n        const startAngle = k * ((2 * Math.PI) / segmentCount);\n        const endAngle = startAngle + arcAngle;\n\n        const arcGenerator = d3.arc()\n          .innerRadius(innerRadius)\n          .outerRadius(outerRadius)\n          .startAngle(startAngle)\n          .endAngle(endAngle);\n\n        if (!personId) {\n          svg.append(\"path\")\n            .attr(\"transform\", `translate(${centerX},${centerY})`)\n            .attr(\"d\", arcGenerator)\n            .attr(\"fill\", \"#eee\")\n            .attr(\"stroke\", \"#ccc\");\n          continue;\n        }\n\n        svg.append(\"path\")\n          .attr(\"transform\", `translate(${centerX},${centerY})`)\n          .attr(\"d\", arcGenerator)\n          .attr(\"fill\", arcFillColor)\n          .attr(\"stroke\", \"#333\")\n          .on(\"click\", () => {\n            setSelectedPersonId(personId);\n          });\n\n        let label = \"Unknown\";\n        const person = peopleMap.get(personId);\n        if (person) {\n          label =\n            person.firstName +\n            \" \" +\n            person.lastName +\n            \" (\" +\n            person.birthDate +\n            \" - \" +\n            person.deathDate +\n            \")\";\n        }\n\n        const midRadius = (innerRadius + outerRadius) / 2;\n        const angleDiff = Math.abs(endAngle - startAngle);\n        const arcLength = angleDiff * midRadius;\n\n        const lines = wrapTextToWidth(label, arcLength, DEFAULT_FONT_SIZE);\n        const numLines = lines.length;\n        const totalHeight = (numLines - 1) * LINE_SPACING;\n        const outermostRadius = midRadius + totalHeight / 2;\n\n        for (let idx = 0; idx < numLines; idx++) {\n          const lineText = lines[idx];\n          const lineRadius = outermostRadius - idx * LINE_SPACING;\n\n          const lineArcGen = d3.arc()\n            .innerRadius(lineRadius)\n            .outerRadius(lineRadius)\n            .startAngle(startAngle)\n            .endAngle(endAngle);\n\n          const textPathId = `textPath-${i}-${k}-line${idx}`;\n          svg.append(\"defs\")\n            .append(\"path\")\n            .attr(\"id\", textPathId)\n            .attr(\"transform\", `translate(${centerX},${centerY})`)\n            .attr(\"d\", lineArcGen());\n\n          const lineArcLength = angleDiff * lineRadius;\n\n          svg.append(\"text\")\n            .style(\"font-size\", DEFAULT_FONT_SIZE + \"px\")\n            .style(\"fill\", \"#fff\")\n            .append(\"textPath\")\n            .attr(\"xlink:href\", \"#\" + textPathId)\n            .attr(\"startOffset\", (lineArcLength / 2) + \"px\")\n            .style(\"text-anchor\", \"middle\")\n            .text(lineText);\n        }\n      }\n    }\n  }\n\n  // Editing form logic\n  const handleEditSave = (updatedPerson) => {\n    onUpdatePeople((prev) =>\n      prev.map((p) => (p.id === updatedPerson.id ? updatedPerson : p))\n    );\n    setSelectedPersonId(null);\n  };\n\n  const handleEditCancel = () => {\n    setSelectedPersonId(null);\n  };\n\n  const selectedPerson = people.find((p) => p.id === selectedPersonId);\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <svg ref={svgRef}></svg>\n      {selectedPerson && (\n        <PersonEditForm\n          person={selectedPerson}\n          onSave={handleEditSave}\n          onCancel={handleEditCancel}\n        />\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}