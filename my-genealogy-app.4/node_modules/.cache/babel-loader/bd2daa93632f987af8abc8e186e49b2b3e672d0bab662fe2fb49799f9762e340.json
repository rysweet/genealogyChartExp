{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/genealogyChartExp/my-genealogy-app/src/components/GenealogyChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport PersonEditForm from \"./PersonEditForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RING_WIDTH = 100; // radial width per generation\nconst ARC_PADDING = 0; // gap in degrees between arcs\nconst CENTER_RADIUS = 30; // radius for the center circle\n\nexport default function GenealogyChart({\n  people,\n  maxGenerations,\n  centerPersonId,\n  onUpdatePeople\n}) {\n  _s();\n  const [selectedPersonId, setSelectedPersonId] = useState(null);\n  const svgRef = useRef(null);\n  useEffect(() => {\n    if (!people || people.length === 0) return;\n    drawChart();\n  }, [people, maxGenerations]);\n  function drawChart() {\n    const width = 800;\n    const height = 800;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Clear old svg\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    // Create base SVG\n    const svg = d3.select(svgRef.current).attr(\"width\", width).attr(\"height\", height);\n\n    // Map of id -> person\n    const peopleMap = new Map(people.map(p => [p.id, p]));\n\n    // Build BFS arrays of ancestors up to maxGenerations\n    // ancestors[i] = array of length 2^i (the father and mother slots for each ancestor of gen i)\n    const ancestors = [];\n    for (let i = 0; i < maxGenerations; i++) {\n      ancestors[i] = new Array(2 ** i).fill(null);\n    }\n    // Generation 0 is the center\n    ancestors[0][0] = centerPersonId;\n\n    // Populate subsequent generations\n    for (let i = 0; i < maxGenerations - 1; i++) {\n      const size = 2 ** i;\n      for (let j = 0; j < size; j++) {\n        const personId = ancestors[i][j];\n        if (!personId) continue;\n        const person = peopleMap.get(personId);\n        if (!person) continue;\n\n        // father => next generation slot 2*j, mother => next generation slot 2*j+1\n        if (person.parents && person.parents.length > 0) {\n          ancestors[i + 1][2 * j] = person.parents[0] || null;\n        }\n        if (person.parents && person.parents.length > 1) {\n          ancestors[i + 1][2 * j + 1] = person.parents[1] || null;\n        }\n      }\n    }\n\n    // 1) Center circle\n    const centerPerson = peopleMap.get(centerPersonId);\n    svg.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", CENTER_RADIUS).attr(\"fill\", \"#F6C\").attr(\"stroke\", \"#333\").on(\"click\", () => {\n      setSelectedPersonId(centerPersonId);\n    });\n\n    // Center label\n    svg.append(\"text\").attr(\"x\", centerX).attr(\"y\", centerY + 4).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"14px\").text(centerPerson ? centerPerson.firstName + \" \" + centerPerson.lastName : \"Unknown\");\n\n    // 2) Rings for generations 1..maxGenerations-1\n    for (let i = 1; i < maxGenerations; i++) {\n      const genArray = ancestors[i];\n      const segmentCount = 2 ** i;\n      const arcAngle = 2 * Math.PI / segmentCount - ARC_PADDING * Math.PI / 180;\n\n      // define ring radii\n      const innerRadius = (i - 1) * RING_WIDTH + CENTER_RADIUS + 10;\n      const outerRadius = i * RING_WIDTH + CENTER_RADIUS;\n      for (let k = 0; k < segmentCount; k++) {\n        const personId = genArray[k];\n        const startAngle = k * (2 * Math.PI / segmentCount);\n        const endAngle = startAngle + arcAngle;\n        const arcGenerator = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle);\n        if (!personId) {\n          // Optional: draw a blank arc\n          svg.append(\"path\").attr(\"transform\", \"translate(\" + centerX + \",\" + centerY + \")\").attr(\"d\", arcGenerator).attr(\"fill\", \"#eee\").attr(\"stroke\", \"#ccc\");\n          continue;\n        }\n\n        // Draw an interactive arc\n        svg.append(\"path\").attr(\"transform\", \"translate(\" + centerX + \",\" + centerY + \")\").attr(\"d\", arcGenerator).attr(\"fill\", \"#ddd\").attr(\"stroke\", \"#999\").on(\"click\", () => {\n          setSelectedPersonId(personId);\n        });\n\n        // Label\n        const textPathId = \"textPath-\" + i + \"-\" + k;\n        svg.append(\"defs\").append(\"path\").attr(\"id\", textPathId).attr(\"d\", arcGenerator()).attr(\"transform\", \"translate(\" + centerX + \",\" + centerY + \")\");\n        const person = peopleMap.get(personId);\n        let label = \"Unknown\";\n        if (person) {\n          label = person.firstName + \" \" + person.lastName + \" (\" + person.birthDate + \" - \" + person.deathDate + \")\";\n        }\n        svg.append(\"text\").append(\"textPath\").attr(\"xlink:href\", \"#\" + textPathId).attr(\"startOffset\", \"25%\").style(\"font-size\", \"12px\").style(\"text-anchor\", \"middle\").text(label);\n      }\n    }\n  }\n\n  // Editing logic\n  const handleEditSave = updatedPerson => {\n    onUpdatePeople(prev => prev.map(p => p.id === updatedPerson.id ? updatedPerson : p));\n    setSelectedPersonId(null);\n  };\n  const handleEditCancel = () => {\n    setSelectedPersonId(null);\n  };\n  const selectedPerson = people.find(p => p.id === selectedPersonId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), selectedPerson && /*#__PURE__*/_jsxDEV(PersonEditForm, {\n      person: selectedPerson,\n      onSave: handleEditSave,\n      onCancel: handleEditCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n_s(GenealogyChart, \"HkK2Qgqlq1AU8O8gVdur7h43CwU=\");\n_c = GenealogyChart;\nvar _c;\n$RefreshReg$(_c, \"GenealogyChart\");","map":{"version":3,"names":["React","useState","useRef","useEffect","d3","PersonEditForm","jsxDEV","_jsxDEV","RING_WIDTH","ARC_PADDING","CENTER_RADIUS","GenealogyChart","people","maxGenerations","centerPersonId","onUpdatePeople","_s","selectedPersonId","setSelectedPersonId","svgRef","length","drawChart","width","height","centerX","centerY","select","current","selectAll","remove","svg","attr","peopleMap","Map","map","p","id","ancestors","i","Array","fill","size","j","personId","person","get","parents","centerPerson","append","on","style","text","firstName","lastName","genArray","segmentCount","arcAngle","Math","PI","innerRadius","outerRadius","k","startAngle","endAngle","arcGenerator","arc","textPathId","label","birthDate","deathDate","handleEditSave","updatedPerson","prev","handleEditCancel","selectedPerson","find","position","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onSave","onCancel","_c","$RefreshReg$"],"sources":["/Users/ryan/genealogyChartExp/my-genealogy-app/src/components/GenealogyChart.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport PersonEditForm from \"./PersonEditForm\";\n\nconst RING_WIDTH = 100;  // radial width per generation\nconst ARC_PADDING = 0;   // gap in degrees between arcs\nconst CENTER_RADIUS = 30; // radius for the center circle\n\nexport default function GenealogyChart({\n  people,\n  maxGenerations,\n  centerPersonId,\n  onUpdatePeople\n}) {\n  const [selectedPersonId, setSelectedPersonId] = useState(null);\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    if (!people || people.length === 0) return;\n    drawChart();\n  }, [people, maxGenerations]);\n\n  function drawChart() {\n    const width = 800;\n    const height = 800;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Clear old svg\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    // Create base SVG\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    // Map of id -> person\n    const peopleMap = new Map(people.map((p) => [p.id, p]));\n\n    // Build BFS arrays of ancestors up to maxGenerations\n    // ancestors[i] = array of length 2^i (the father and mother slots for each ancestor of gen i)\n    const ancestors = [];\n    for (let i = 0; i < maxGenerations; i++) {\n      ancestors[i] = new Array(2 ** i).fill(null);\n    }\n    // Generation 0 is the center\n    ancestors[0][0] = centerPersonId;\n\n    // Populate subsequent generations\n    for (let i = 0; i < maxGenerations - 1; i++) {\n      const size = 2 ** i;\n      for (let j = 0; j < size; j++) {\n        const personId = ancestors[i][j];\n        if (!personId) continue;\n        const person = peopleMap.get(personId);\n        if (!person) continue;\n\n        // father => next generation slot 2*j, mother => next generation slot 2*j+1\n        if (person.parents && person.parents.length > 0) {\n          ancestors[i + 1][2 * j] = person.parents[0] || null;\n        }\n        if (person.parents && person.parents.length > 1) {\n          ancestors[i + 1][2 * j + 1] = person.parents[1] || null;\n        }\n      }\n    }\n\n    // 1) Center circle\n    const centerPerson = peopleMap.get(centerPersonId);\n    svg\n      .append(\"circle\")\n      .attr(\"cx\", centerX)\n      .attr(\"cy\", centerY)\n      .attr(\"r\", CENTER_RADIUS)\n      .attr(\"fill\", \"#F6C\")\n      .attr(\"stroke\", \"#333\")\n      .on(\"click\", () => {\n        setSelectedPersonId(centerPersonId);\n      });\n\n    // Center label\n    svg\n      .append(\"text\")\n      .attr(\"x\", centerX)\n      .attr(\"y\", centerY + 4)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"14px\")\n      .text(\n        centerPerson\n          ? centerPerson.firstName + \" \" + centerPerson.lastName\n          : \"Unknown\"\n      );\n\n    // 2) Rings for generations 1..maxGenerations-1\n    for (let i = 1; i < maxGenerations; i++) {\n      const genArray = ancestors[i];\n      const segmentCount = 2 ** i;\n      const arcAngle = (2 * Math.PI) / segmentCount - (ARC_PADDING * Math.PI) / 180;\n\n      // define ring radii\n      const innerRadius = (i - 1) * RING_WIDTH + CENTER_RADIUS + 10;\n      const outerRadius = i * RING_WIDTH + CENTER_RADIUS;\n\n      for (let k = 0; k < segmentCount; k++) {\n        const personId = genArray[k];\n        const startAngle = k * ((2 * Math.PI) / segmentCount);\n        const endAngle = startAngle + arcAngle;\n\n        const arcGenerator = d3\n          .arc()\n          .innerRadius(innerRadius)\n          .outerRadius(outerRadius)\n          .startAngle(startAngle)\n          .endAngle(endAngle);\n\n        if (!personId) {\n          // Optional: draw a blank arc\n          svg\n            .append(\"path\")\n            .attr(\"transform\", \"translate(\" + centerX + \",\" + centerY + \")\")\n            .attr(\"d\", arcGenerator)\n            .attr(\"fill\", \"#eee\")\n            .attr(\"stroke\", \"#ccc\");\n          continue;\n        }\n\n        // Draw an interactive arc\n        svg\n          .append(\"path\")\n          .attr(\"transform\", \"translate(\" + centerX + \",\" + centerY + \")\")\n          .attr(\"d\", arcGenerator)\n          .attr(\"fill\", \"#ddd\")\n          .attr(\"stroke\", \"#999\")\n          .on(\"click\", () => {\n            setSelectedPersonId(personId);\n          });\n\n        // Label\n        const textPathId = \"textPath-\" + i + \"-\" + k;\n        svg\n          .append(\"defs\")\n          .append(\"path\")\n          .attr(\"id\", textPathId)\n          .attr(\"d\", arcGenerator())\n          .attr(\"transform\", \"translate(\" + centerX + \",\" + centerY + \")\");\n\n        const person = peopleMap.get(personId);\n        let label = \"Unknown\";\n        if (person) {\n          label =\n            person.firstName +\n            \" \" +\n            person.lastName +\n            \" (\" +\n            person.birthDate +\n            \" - \" +\n            person.deathDate +\n            \")\";\n        }\n\n        svg\n          .append(\"text\")\n          .append(\"textPath\")\n          .attr(\"xlink:href\", \"#\" + textPathId)\n          .attr(\"startOffset\", \"25%\")\n          .style(\"font-size\", \"12px\")\n          .style(\"text-anchor\", \"middle\")\n          .text(label);\n      }\n    }\n  }\n\n  // Editing logic\n  const handleEditSave = (updatedPerson) => {\n    onUpdatePeople((prev) =>\n      prev.map((p) => (p.id === updatedPerson.id ? updatedPerson : p))\n    );\n    setSelectedPersonId(null);\n  };\n  const handleEditCancel = () => {\n    setSelectedPersonId(null);\n  };\n  const selectedPerson = people.find((p) => p.id === selectedPersonId);\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <svg ref={svgRef}></svg>\n      {selectedPerson && (\n        <PersonEditForm\n          person={selectedPerson}\n          onSave={handleEditSave}\n          onCancel={handleEditCancel}\n        />\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}