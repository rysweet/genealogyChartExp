{"ast":null,"code":"export async function importGedcomFile(file) {\n  const text = await file.text();\n  // Very naive GEDCOM parsing stub\n  const lines = text.split(/\\\\r?\\\\n/);\n  let people = [];\n  let currentPerson = null;\n  lines.forEach(line => {\n    if (line.match(/^0 @I/)) {\n      if (currentPerson) {\n        people.push(currentPerson);\n      }\n      currentPerson = {\n        id: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        birthDate: \"\",\n        deathDate: \"\",\n        parents: []\n      };\n      const match = line.match(/^0 @(.+?)@/);\n      if (match) {\n        currentPerson.id = match[1];\n      }\n    } else if (currentPerson && line.includes(\"GIVN\")) {\n      currentPerson.firstName = line.split(\"GIVN \")[1] || \"\";\n    } else if (currentPerson && line.includes(\"SURN\")) {\n      currentPerson.lastName = line.split(\"SURN \")[1] || \"\";\n    } else if (currentPerson && line.includes(\"BIRT\")) {\n      // we'll skip or wait for the date line\n    } else if (currentPerson && line.includes(\"DATE\") && line.includes(\"BIRT\")) {\n      currentPerson.birthDate = line.split(\"DATE \")[1] || \"\";\n    } else if (currentPerson && line.includes(\"DEAT\")) {\n      // skip or wait for date\n    } else if (currentPerson && line.includes(\"DATE\") && line.includes(\"DEAT\")) {\n      currentPerson.deathDate = line.split(\"DATE \")[1] || \"\";\n    }\n    // Real GEDCOM would require deeper parsing for parent relationships (FAM, HUSB, WIFE, etc.)\n  });\n  if (currentPerson) {\n    people.push(currentPerson);\n  }\n  return people;\n}","map":{"version":3,"names":["importGedcomFile","file","text","lines","split","people","currentPerson","forEach","line","match","push","id","firstName","lastName","birthDate","deathDate","parents","includes"],"sources":["/Users/ryan/genealogyChartExp/my-genealogy-app/src/gedcom/importGedcom.js"],"sourcesContent":["export async function importGedcomFile(file) {\n  const text = await file.text();\n  // Very naive GEDCOM parsing stub\n  const lines = text.split(/\\\\r?\\\\n/);\n  let people = [];\n  let currentPerson = null;\n\n  lines.forEach((line) => {\n    if (line.match(/^0 @I/)) {\n      if (currentPerson) {\n        people.push(currentPerson);\n      }\n      currentPerson = { id: \"\", firstName: \"\", lastName: \"\", birthDate: \"\", deathDate: \"\", parents: [] };\n      const match = line.match(/^0 @(.+?)@/);\n      if (match) {\n        currentPerson.id = match[1];\n      }\n    } else if (currentPerson && line.includes(\"GIVN\")) {\n      currentPerson.firstName = line.split(\"GIVN \")[1] || \"\";\n    } else if (currentPerson && line.includes(\"SURN\")) {\n      currentPerson.lastName = line.split(\"SURN \")[1] || \"\";\n    } else if (currentPerson && line.includes(\"BIRT\")) {\n      // we'll skip or wait for the date line\n    } else if (currentPerson && line.includes(\"DATE\") && line.includes(\"BIRT\")) {\n      currentPerson.birthDate = line.split(\"DATE \")[1] || \"\";\n    } else if (currentPerson && line.includes(\"DEAT\")) {\n      // skip or wait for date\n    } else if (currentPerson && line.includes(\"DATE\") && line.includes(\"DEAT\")) {\n      currentPerson.deathDate = line.split(\"DATE \")[1] || \"\";\n    }\n    // Real GEDCOM would require deeper parsing for parent relationships (FAM, HUSB, WIFE, etc.)\n  });\n\n  if (currentPerson) {\n    people.push(currentPerson);\n  }\n\n  return people;\n}\n"],"mappings":"AAAA,OAAO,eAAeA,gBAAgBA,CAACC,IAAI,EAAE;EAC3C,MAAMC,IAAI,GAAG,MAAMD,IAAI,CAACC,IAAI,CAAC,CAAC;EAC9B;EACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,SAAS,CAAC;EACnC,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,aAAa,GAAG,IAAI;EAExBH,KAAK,CAACI,OAAO,CAAEC,IAAI,IAAK;IACtB,IAAIA,IAAI,CAACC,KAAK,CAAC,OAAO,CAAC,EAAE;MACvB,IAAIH,aAAa,EAAE;QACjBD,MAAM,CAACK,IAAI,CAACJ,aAAa,CAAC;MAC5B;MACAA,aAAa,GAAG;QAAEK,EAAE,EAAE,EAAE;QAAEC,SAAS,EAAE,EAAE;QAAEC,QAAQ,EAAE,EAAE;QAAEC,SAAS,EAAE,EAAE;QAAEC,SAAS,EAAE,EAAE;QAAEC,OAAO,EAAE;MAAG,CAAC;MAClG,MAAMP,KAAK,GAAGD,IAAI,CAACC,KAAK,CAAC,YAAY,CAAC;MACtC,IAAIA,KAAK,EAAE;QACTH,aAAa,CAACK,EAAE,GAAGF,KAAK,CAAC,CAAC,CAAC;MAC7B;IACF,CAAC,MAAM,IAAIH,aAAa,IAAIE,IAAI,CAACS,QAAQ,CAAC,MAAM,CAAC,EAAE;MACjDX,aAAa,CAACM,SAAS,GAAGJ,IAAI,CAACJ,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;IACxD,CAAC,MAAM,IAAIE,aAAa,IAAIE,IAAI,CAACS,QAAQ,CAAC,MAAM,CAAC,EAAE;MACjDX,aAAa,CAACO,QAAQ,GAAGL,IAAI,CAACJ,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;IACvD,CAAC,MAAM,IAAIE,aAAa,IAAIE,IAAI,CAACS,QAAQ,CAAC,MAAM,CAAC,EAAE;MACjD;IAAA,CACD,MAAM,IAAIX,aAAa,IAAIE,IAAI,CAACS,QAAQ,CAAC,MAAM,CAAC,IAAIT,IAAI,CAACS,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC1EX,aAAa,CAACQ,SAAS,GAAGN,IAAI,CAACJ,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;IACxD,CAAC,MAAM,IAAIE,aAAa,IAAIE,IAAI,CAACS,QAAQ,CAAC,MAAM,CAAC,EAAE;MACjD;IAAA,CACD,MAAM,IAAIX,aAAa,IAAIE,IAAI,CAACS,QAAQ,CAAC,MAAM,CAAC,IAAIT,IAAI,CAACS,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC1EX,aAAa,CAACS,SAAS,GAAGP,IAAI,CAACJ,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;IACxD;IACA;EACF,CAAC,CAAC;EAEF,IAAIE,aAAa,EAAE;IACjBD,MAAM,CAACK,IAAI,CAACJ,aAAa,CAAC;EAC5B;EAEA,OAAOD,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}