{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/genealogyChartExp/my-genealogy-app/src/components/GenealogyChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport PersonEditForm from \"./PersonEditForm\";\n\n// Geometry\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RING_WIDTH = 60;\nconst ARC_PADDING = 0;\nconst CENTER_RADIUS = 30;\n\n// Text\nconst DEFAULT_FONT_SIZE = 8;\nconst LINE_SPACING = 10;\n\n/**\n * Create a color scale from very dark green (#002200) to a lighter green (#99ff99).\n */\nfunction createColorScale(maxGenerations) {\n  return d3.scaleLinear().domain([0, maxGenerations - 1]).range([\"#002200\", \"#99ff99\"]);\n}\nfunction getTextColorForBackground(backgroundColor) {\n  // Convert hex to RGB\n  const r = parseInt(backgroundColor.slice(1, 3), 16);\n  const g = parseInt(backgroundColor.slice(3, 5), 16);\n  const b = parseInt(backgroundColor.slice(5, 7), 16);\n\n  // Calculate brightness using W3C formula\n  const brightness = Math.round((r * 299 + g * 587 + b * 114) / 1000);\n\n  // Debug log\n  console.log(`Color: ${backgroundColor}, RGB: ${r},${g},${b}, Brightness: ${brightness}`);\n\n  // Adjust threshold - try 125 instead of 150 for our green range\n  const textColor = brightness > 50 ? \"#003300\" : \"#ffffff\";\n  console.log(`Choosing text color: ${textColor}`);\n  return textColor;\n}\nexport default function GenealogyChart({\n  people,\n  maxGenerations,\n  centerPersonId,\n  onUpdatePeople\n}) {\n  _s();\n  const [selectedPersonId, setSelectedPersonId] = useState(null);\n  const svgRef = useRef(null);\n  useEffect(() => {\n    drawChart();\n  }, [people, maxGenerations, centerPersonId]);\n  function approximateTextWidth(str, fontSize = DEFAULT_FONT_SIZE) {\n    const avgCharWidth = fontSize * 0.6;\n    return str.length * avgCharWidth;\n  }\n  function wrapTextToWidth(str, arcLength, fontSize = DEFAULT_FONT_SIZE) {\n    const words = str.split(\" \");\n    const lines = [];\n    let currentLineWords = [];\n    for (let i = 0; i < words.length; i++) {\n      const testLine = [...currentLineWords, words[i]].join(\" \");\n      const testWidth = approximateTextWidth(testLine, fontSize);\n      if (testWidth <= arcLength) {\n        currentLineWords.push(words[i]);\n      } else {\n        lines.push(currentLineWords.join(\" \"));\n        currentLineWords = [words[i]];\n      }\n    }\n    if (currentLineWords.length > 0) {\n      lines.push(currentLineWords.join(\" \"));\n    }\n    return lines;\n  }\n  function drawChart() {\n    const width = 800;\n    const height = 800;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n    const svg = d3.select(svgRef.current).attr(\"width\", width).attr(\"height\", height);\n    const colorScale = createColorScale(maxGenerations);\n    const peopleMap = new Map(people.map(p => [p.id, p]));\n    const ancestors = [];\n    for (let i = 0; i < maxGenerations; i++) {\n      ancestors[i] = new Array(2 ** i).fill(null);\n    }\n    ancestors[0][0] = centerPersonId;\n    for (let i = 0; i < maxGenerations - 1; i++) {\n      const size = 2 ** i;\n      for (let j = 0; j < size; j++) {\n        const pid = ancestors[i][j];\n        if (!pid) continue;\n        const person = peopleMap.get(pid);\n        if (!person) continue;\n        if (person.parents && person.parents.length > 0) {\n          ancestors[i + 1][2 * j] = person.parents[0] || null;\n        }\n        if (person.parents && person.parents.length > 1) {\n          ancestors[i + 1][2 * j + 1] = person.parents[1] || null;\n        }\n      }\n    }\n    const centerPerson = peopleMap.get(centerPersonId);\n    const centerBgColor = colorScale(0);\n    svg.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", CENTER_RADIUS).attr(\"fill\", centerBgColor).attr(\"stroke\", \"#333\").on(\"click\", () => {\n      setSelectedPersonId(centerPersonId);\n    });\n    console.log('Center color:', centerBgColor, 'Text color:', getTextColorForBackground(centerBgColor));\n    svg.append(\"text\").attr(\"x\", centerX).attr(\"y\", centerY + 4).attr(\"text-anchor\", \"middle\").style(\"font-size\", DEFAULT_FONT_SIZE + \"px\").style(\"fill\", getTextColorForBackground(centerBgColor)).text(centerPerson ? centerPerson.firstName + \" \" + centerPerson.lastName : \"Unknown\");\n    for (let i = 1; i < maxGenerations; i++) {\n      const genArray = ancestors[i];\n      const segmentCount = 2 ** i;\n      const arcAngle = 2 * Math.PI / segmentCount - ARC_PADDING * Math.PI / 180;\n      const innerRadius = (i - 1) * RING_WIDTH + CENTER_RADIUS;\n      const outerRadius = i * RING_WIDTH + CENTER_RADIUS;\n      const arcFillColor = colorScale(i);\n      for (let k = 0; k < segmentCount; k++) {\n        const personId = genArray[k];\n        const startAngle = k * (2 * Math.PI / segmentCount);\n        const endAngle = startAngle + arcAngle;\n        const arcGenerator = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle);\n        if (!personId) {\n          svg.append(\"path\").attr(\"transform\", `translate(${centerX},${centerY})`).attr(\"d\", arcGenerator).attr(\"fill\", \"#eee\").attr(\"stroke\", \"#ccc\");\n          continue;\n        }\n        svg.append(\"path\").attr(\"transform\", `translate(${centerX},${centerY})`).attr(\"d\", arcGenerator).attr(\"fill\", arcFillColor).attr(\"stroke\", \"#333\").on(\"click\", () => {\n          setSelectedPersonId(personId);\n        });\n        let label = \"Unknown\";\n        const person = peopleMap.get(personId);\n        if (person) {\n          label = person.firstName + \" \" + person.lastName + \" (\" + person.birthDate + \" - \" + person.deathDate + \")\";\n        }\n        const midRadius = (innerRadius + outerRadius) / 2;\n        const angleDiff = Math.abs(endAngle - startAngle);\n        const arcLength = angleDiff * midRadius;\n        const lines = wrapTextToWidth(label, arcLength, DEFAULT_FONT_SIZE);\n        const numLines = lines.length;\n        const totalHeight = (numLines - 1) * LINE_SPACING;\n        // Now, line 0 will be the outermost line and subsequent lines are placed inward\n        const outermostRadius = midRadius + totalHeight / 2;\n        lines.forEach((lineText, idx) => {\n          const lineRadius = outermostRadius - idx * LINE_SPACING;\n          const lineArcGen = d3.arc().innerRadius(lineRadius).outerRadius(lineRadius).startAngle(startAngle).endAngle(endAngle);\n          const textPathId = `textPath-${i}-${k}-line${idx}`;\n          svg.append(\"defs\").append(\"path\").attr(\"id\", textPathId).attr(\"transform\", `translate(${centerX},${centerY})`).attr(\"d\", lineArcGen());\n          const lineArcLength = angleDiff * lineRadius;\n          svg.append(\"text\").style(\"font-size\", DEFAULT_FONT_SIZE + \"px\").style(\"fill\", getTextColorForBackground(arcFillColor)).append(\"textPath\").attr(\"xlink:href\", \"#\" + textPathId).attr(\"startOffset\", lineArcLength / 2 + \"px\").style(\"text-anchor\", \"middle\").text(lineText);\n        });\n      }\n    }\n  }\n  const handleEditSave = updatedPerson => {\n    onUpdatePeople(prev => prev.map(p => p.id === updatedPerson.id ? updatedPerson : p));\n    setSelectedPersonId(null);\n  };\n  const handleEditCancel = () => {\n    setSelectedPersonId(null);\n  };\n  const selectedPerson = people.find(p => p.id === selectedPersonId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), selectedPerson && /*#__PURE__*/_jsxDEV(PersonEditForm, {\n      person: selectedPerson,\n      onSave: handleEditSave,\n      onCancel: handleEditCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n}\n_s(GenealogyChart, \"HkK2Qgqlq1AU8O8gVdur7h43CwU=\");\n_c = GenealogyChart;\nvar _c;\n$RefreshReg$(_c, \"GenealogyChart\");","map":{"version":3,"names":["React","useState","useRef","useEffect","d3","PersonEditForm","jsxDEV","_jsxDEV","RING_WIDTH","ARC_PADDING","CENTER_RADIUS","DEFAULT_FONT_SIZE","LINE_SPACING","createColorScale","maxGenerations","scaleLinear","domain","range","getTextColorForBackground","backgroundColor","r","parseInt","slice","g","b","brightness","Math","round","console","log","textColor","GenealogyChart","people","centerPersonId","onUpdatePeople","_s","selectedPersonId","setSelectedPersonId","svgRef","drawChart","approximateTextWidth","str","fontSize","avgCharWidth","length","wrapTextToWidth","arcLength","words","split","lines","currentLineWords","i","testLine","join","testWidth","push","width","height","centerX","centerY","select","current","selectAll","remove","svg","attr","colorScale","peopleMap","Map","map","p","id","ancestors","Array","fill","size","j","pid","person","get","parents","centerPerson","centerBgColor","append","on","style","text","firstName","lastName","genArray","segmentCount","arcAngle","PI","innerRadius","outerRadius","arcFillColor","k","personId","startAngle","endAngle","arcGenerator","arc","label","birthDate","deathDate","midRadius","angleDiff","abs","numLines","totalHeight","outermostRadius","forEach","lineText","idx","lineRadius","lineArcGen","textPathId","lineArcLength","handleEditSave","updatedPerson","prev","handleEditCancel","selectedPerson","find","position","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onSave","onCancel","_c","$RefreshReg$"],"sources":["/Users/ryan/genealogyChartExp/my-genealogy-app/src/components/GenealogyChart.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport PersonEditForm from \"./PersonEditForm\";\n\n// Geometry\nconst RING_WIDTH = 60;\nconst ARC_PADDING = 0;\nconst CENTER_RADIUS = 30;\n\n// Text\nconst DEFAULT_FONT_SIZE = 8;\nconst LINE_SPACING = 10;\n\n/**\n * Create a color scale from very dark green (#002200) to a lighter green (#99ff99).\n */\nfunction createColorScale(maxGenerations) {\n  return d3.scaleLinear()\n    .domain([0, maxGenerations - 1])\n    .range([\"#002200\", \"#99ff99\"]);\n}\n\nfunction getTextColorForBackground(backgroundColor) {\n  // Convert hex to RGB\n  const r = parseInt(backgroundColor.slice(1, 3), 16);\n  const g = parseInt(backgroundColor.slice(3, 5), 16);\n  const b = parseInt(backgroundColor.slice(5, 7), 16);\n  \n  // Calculate brightness using W3C formula\n  const brightness = Math.round(((r * 299) + (g * 587) + (b * 114)) / 1000);\n  \n  // Debug log\n  console.log(`Color: ${backgroundColor}, RGB: ${r},${g},${b}, Brightness: ${brightness}`);\n  \n  // Adjust threshold - try 125 instead of 150 for our green range\n  const textColor = brightness > 50 ? \"#003300\" : \"#ffffff\";\n  console.log(`Choosing text color: ${textColor}`);\n  \n  return textColor;\n}\n\nexport default function GenealogyChart({\n  people,\n  maxGenerations,\n  centerPersonId,\n  onUpdatePeople\n}) {\n  const [selectedPersonId, setSelectedPersonId] = useState(null);\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    drawChart();\n  }, [people, maxGenerations, centerPersonId]);\n\n  function approximateTextWidth(str, fontSize = DEFAULT_FONT_SIZE) {\n    const avgCharWidth = fontSize * 0.6;\n    return str.length * avgCharWidth;\n  }\n\n  function wrapTextToWidth(str, arcLength, fontSize = DEFAULT_FONT_SIZE) {\n    const words = str.split(\" \");\n    const lines = [];\n    let currentLineWords = [];\n    for (let i = 0; i < words.length; i++) {\n      const testLine = [...currentLineWords, words[i]].join(\" \");\n      const testWidth = approximateTextWidth(testLine, fontSize);\n      if (testWidth <= arcLength) {\n        currentLineWords.push(words[i]);\n      } else {\n        lines.push(currentLineWords.join(\" \"));\n        currentLineWords = [words[i]];\n      }\n    }\n    if (currentLineWords.length > 0) {\n      lines.push(currentLineWords.join(\" \"));\n    }\n    return lines;\n  }\n\n  function drawChart() {\n    const width = 800;\n    const height = 800;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n    const svg = d3.select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n    const colorScale = createColorScale(maxGenerations);\n    const peopleMap = new Map(people.map((p) => [p.id, p]));\n    const ancestors = [];\n    for (let i = 0; i < maxGenerations; i++) {\n      ancestors[i] = new Array(2 ** i).fill(null);\n    }\n    ancestors[0][0] = centerPersonId;\n    for (let i = 0; i < maxGenerations - 1; i++) {\n      const size = 2 ** i;\n      for (let j = 0; j < size; j++) {\n        const pid = ancestors[i][j];\n        if (!pid) continue;\n        const person = peopleMap.get(pid);\n        if (!person) continue;\n        if (person.parents && person.parents.length > 0) {\n          ancestors[i + 1][2 * j] = person.parents[0] || null;\n        }\n        if (person.parents && person.parents.length > 1) {\n          ancestors[i + 1][2 * j + 1] = person.parents[1] || null;\n        }\n      }\n    }\n    const centerPerson = peopleMap.get(centerPersonId);\n    const centerBgColor = colorScale(0);\n    svg.append(\"circle\")\n      .attr(\"cx\", centerX)\n      .attr(\"cy\", centerY)\n      .attr(\"r\", CENTER_RADIUS)\n      .attr(\"fill\", centerBgColor)\n      .attr(\"stroke\", \"#333\")\n      .on(\"click\", () => { setSelectedPersonId(centerPersonId); });\n    \n    console.log('Center color:', centerBgColor, 'Text color:', getTextColorForBackground(centerBgColor));\n    \n    svg.append(\"text\")\n      .attr(\"x\", centerX)\n      .attr(\"y\", centerY + 4)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", DEFAULT_FONT_SIZE + \"px\")\n      .style(\"fill\", getTextColorForBackground(centerBgColor))\n      .text(centerPerson ? centerPerson.firstName + \" \" + centerPerson.lastName : \"Unknown\");\n    for (let i = 1; i < maxGenerations; i++) {\n      const genArray = ancestors[i];\n      const segmentCount = 2 ** i;\n      const arcAngle = (2 * Math.PI) / segmentCount - (ARC_PADDING * Math.PI) / 180;\n      const innerRadius = (i - 1) * RING_WIDTH + CENTER_RADIUS;\n      const outerRadius = i * RING_WIDTH + CENTER_RADIUS;\n      const arcFillColor = colorScale(i);\n      for (let k = 0; k < segmentCount; k++) {\n        const personId = genArray[k];\n        const startAngle = k * ((2 * Math.PI) / segmentCount);\n        const endAngle = startAngle + arcAngle;\n        const arcGenerator = d3.arc()\n          .innerRadius(innerRadius)\n          .outerRadius(outerRadius)\n          .startAngle(startAngle)\n          .endAngle(endAngle);\n        if (!personId) {\n          svg.append(\"path\")\n            .attr(\"transform\", `translate(${centerX},${centerY})`)\n            .attr(\"d\", arcGenerator)\n            .attr(\"fill\", \"#eee\")\n            .attr(\"stroke\", \"#ccc\");\n          continue;\n        }\n        svg.append(\"path\")\n          .attr(\"transform\", `translate(${centerX},${centerY})`)\n          .attr(\"d\", arcGenerator)\n          .attr(\"fill\", arcFillColor)\n          .attr(\"stroke\", \"#333\")\n          .on(\"click\", () => { setSelectedPersonId(personId); });\n        let label = \"Unknown\";\n        const person = peopleMap.get(personId);\n        if (person) {\n          label = person.firstName + \" \" + person.lastName + \" (\" + person.birthDate + \" - \" + person.deathDate + \")\";\n        }\n        const midRadius = (innerRadius + outerRadius) / 2;\n        const angleDiff = Math.abs(endAngle - startAngle);\n        const arcLength = angleDiff * midRadius;\n        const lines = wrapTextToWidth(label, arcLength, DEFAULT_FONT_SIZE);\n        const numLines = lines.length;\n        const totalHeight = (numLines - 1) * LINE_SPACING;\n        // Now, line 0 will be the outermost line and subsequent lines are placed inward\n        const outermostRadius = midRadius + totalHeight / 2;\n        lines.forEach((lineText, idx) => {\n          const lineRadius = outermostRadius - idx * LINE_SPACING;\n          const lineArcGen = d3.arc()\n            .innerRadius(lineRadius)\n            .outerRadius(lineRadius)\n            .startAngle(startAngle)\n            .endAngle(endAngle);\n          const textPathId = `textPath-${i}-${k}-line${idx}`;\n          svg.append(\"defs\")\n            .append(\"path\")\n            .attr(\"id\", textPathId)\n            .attr(\"transform\", `translate(${centerX},${centerY})`)\n            .attr(\"d\", lineArcGen());\n          const lineArcLength = angleDiff * lineRadius;\n          svg.append(\"text\")\n            .style(\"font-size\", DEFAULT_FONT_SIZE + \"px\")\n            .style(\"fill\", getTextColorForBackground(arcFillColor))\n            .append(\"textPath\")\n            .attr(\"xlink:href\", \"#\" + textPathId)\n            .attr(\"startOffset\", (lineArcLength / 2) + \"px\")\n            .style(\"text-anchor\", \"middle\")\n            .text(lineText);\n        });\n      }\n    }\n  }\n\n  const handleEditSave = (updatedPerson) => {\n    onUpdatePeople((prev) =>\n      prev.map((p) => (p.id === updatedPerson.id ? updatedPerson : p))\n    );\n    setSelectedPersonId(null);\n  };\n\n  const handleEditCancel = () => {\n    setSelectedPersonId(null);\n  };\n\n  const selectedPerson = people.find((p) => p.id === selectedPersonId);\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <svg ref={svgRef}></svg>\n      {selectedPerson && (\n        <PersonEditForm\n          person={selectedPerson}\n          onSave={handleEditSave}\n          onCancel={handleEditCancel}\n        />\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}