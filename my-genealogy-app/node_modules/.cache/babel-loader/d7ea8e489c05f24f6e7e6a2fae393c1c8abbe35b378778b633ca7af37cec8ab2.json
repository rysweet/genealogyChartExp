{"ast":null,"code":"export async function importGedcomFile(file) {\n  const text = await file.text();\n  console.log(\"Raw file content:\", text.substring(0, 200) + \"...\"); // Show first 200 chars\n\n  const peopleById = {};\n  const familiesById = {};\n  let currentRecord = null;\n  let currentType = null;\n\n  // Fix the line splitting - remove escaped characters\n  const lines = text.split(/\\r?\\n/);\n  console.log(\"Number of lines split:\", lines.length);\n  function finishRecord() {\n    if (!currentRecord || !currentType) return;\n    if (currentType === \"INDI\") {\n      console.log(\"Parsed individual:\", currentRecord);\n      peopleById[currentRecord.id] = currentRecord;\n    } else if (currentType === \"FAM\") {\n      console.log(\"Parsed family:\", currentRecord);\n      familiesById[currentRecord.id] = currentRecord;\n    }\n    currentRecord = null;\n    currentType = null;\n  }\n  lines.forEach((line, index) => {\n    console.log(`Line ${index}:`, line);\n    const parts = line.trim().split(\" \");\n    if (parts.length < 2) return;\n    const level = parts[0];\n    const tagOrId = parts[1];\n    if (level === \"0\" && parts.length >= 2) {\n      if (tagOrId.startsWith(\"@\") && parts.length >= 3) {\n        const recordType = parts[2];\n        if (recordType === \"INDI\") {\n          finishRecord();\n          const cleanedId = tagOrId.replace(/^@|@$/g, \"\");\n          if (recordType === \"INDI\") {\n            currentRecord = {\n              id: cleanedId,\n              firstName: \"\",\n              lastName: \"\",\n              birthDate: \"\",\n              deathDate: \"\",\n              parents: []\n            };\n            currentType = \"INDI\";\n          } else if (recordType === \"FAM\") {\n            currentRecord = {\n              id: cleanedId,\n              husb: null,\n              wife: null,\n              children: []\n            };\n            currentType = \"FAM\";\n          }\n        } else if (recordType === \"FAM\") {\n          finishRecord();\n          const cleanedId = tagOrId.replace(/^@|@$/g, \"\");\n          currentRecord = {\n            id: cleanedId,\n            husb: null,\n            wife: null,\n            children: []\n          };\n          currentType = \"FAM\";\n        }\n      } else if (tagOrId === \"HEAD\") {\n        // Ignore GEDCOM header\n        return;\n      }\n    } else if (currentType === \"INDI\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"NAME\")) {\n        let nameVal = rest.replace(\"NAME\", \"\").trim();\n        const nameParts = nameVal.split(\"/\");\n        if (nameParts.length >= 2) {\n          currentRecord.firstName = nameParts[0].trim();\n          currentRecord.lastName = nameParts[1].trim();\n        } else {\n          currentRecord.firstName = nameVal;\n        }\n      } else if (rest.startsWith(\"GIVN\")) {\n        currentRecord.firstName = rest.replace(\"GIVN\", \"\").trim();\n      } else if (rest.startsWith(\"SURN\")) {\n        currentRecord.lastName = rest.replace(\"SURN\", \"\").trim();\n      } else if (rest.startsWith(\"BIRT\")) {} else if (rest.startsWith(\"DEAT\")) {} else if (rest.startsWith(\"DATE\")) {\n        if (line.includes(\"BIRT\")) {\n          currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n        } else if (line.includes(\"DEAT\")) {\n          currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n        } else {\n          if (!currentRecord.birthDate) {\n            currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n          } else {\n            currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n          }\n        }\n      }\n    } else if (currentType === \"FAM\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"HUSB\") || rest.startsWith(\"WIFE\") || rest.startsWith(\"CHIL\")) {\n        const tokens = rest.split(\" \");\n        const refId = tokens[1] ? tokens[1].replace(/^@|@$/g, \"\") : null;\n        if (rest.startsWith(\"HUSB\")) currentRecord.husb = refId;else if (rest.startsWith(\"WIFE\")) currentRecord.wife = refId;else if (rest.startsWith(\"CHIL\")) currentRecord.children.push(refId);\n      }\n    }\n  });\n  finishRecord();\n  Object.values(familiesById).forEach(fam => {\n    const father = fam.husb;\n    const mother = fam.wife;\n    fam.children.forEach(childId => {\n      if (peopleById[childId]) {\n        peopleById[childId].parents = [];\n        if (father) peopleById[childId].parents.push(father);\n        if (mother) peopleById[childId].parents.push(mother);\n      }\n    });\n  });\n  console.log(\"Final peopleById:\", peopleById);\n  console.log(\"Final familiesById:\", familiesById);\n  console.log(\"Final number of people:\", Object.keys(peopleById).length);\n  console.log(\"Sample person:\", Object.values(peopleById)[0]);\n  return Object.values(peopleById);\n}","map":{"version":3,"names":["importGedcomFile","file","text","console","log","substring","peopleById","familiesById","currentRecord","currentType","lines","split","length","finishRecord","id","forEach","line","index","parts","trim","level","tagOrId","startsWith","recordType","cleanedId","replace","firstName","lastName","birthDate","deathDate","parents","husb","wife","children","rest","nameVal","nameParts","includes","tokens","refId","push","Object","values","fam","father","mother","childId","keys"],"sources":["/Users/ryan/genealogyChartExp/my-genealogy-app/src/gedcom/importGedcom.js"],"sourcesContent":["export async function importGedcomFile(file) {\n  const text = await file.text();\n  console.log(\"Raw file content:\", text.substring(0, 200) + \"...\"); // Show first 200 chars\n  \n  const peopleById = {};\n  const familiesById = {};\n  let currentRecord = null;\n  let currentType = null;\n  \n  // Fix the line splitting - remove escaped characters\n  const lines = text.split(/\\r?\\n/);\n  console.log(\"Number of lines split:\", lines.length);\n\n  function finishRecord() {\n    if (!currentRecord || !currentType) return;\n    if (currentType === \"INDI\") {\n      console.log(\"Parsed individual:\", currentRecord);\n      peopleById[currentRecord.id] = currentRecord;\n    } else if (currentType === \"FAM\") {\n      console.log(\"Parsed family:\", currentRecord);\n      familiesById[currentRecord.id] = currentRecord;\n    }\n    currentRecord = null;\n    currentType = null;\n  }\n\n  lines.forEach((line, index) => {\n    console.log(`Line ${index}:`, line);\n    const parts = line.trim().split(\" \");\n    if (parts.length < 2) return;\n    const level = parts[0];\n    const tagOrId = parts[1];\n\n    if (level === \"0\" && parts.length >= 2) {\n      if (tagOrId.startsWith(\"@\") && parts.length >= 3) {\n        const recordType = parts[2];\n        if (recordType === \"INDI\") {\n          finishRecord();\n          const cleanedId = tagOrId.replace(/^@|@$/g, \"\");\n          if (recordType === \"INDI\") {\n            currentRecord = { id: cleanedId, firstName: \"\", lastName: \"\", birthDate: \"\", deathDate: \"\", parents: [] };\n            currentType = \"INDI\";\n          } else if (recordType === \"FAM\") {\n            currentRecord = { id: cleanedId, husb: null, wife: null, children: [] };\n            currentType = \"FAM\";\n          }\n        } else if (recordType === \"FAM\") {\n          finishRecord();\n          const cleanedId = tagOrId.replace(/^@|@$/g, \"\");\n          currentRecord = { id: cleanedId, husb: null, wife: null, children: [] };\n          currentType = \"FAM\";\n        }\n      } else if (tagOrId === \"HEAD\") {\n        // Ignore GEDCOM header\n        return;\n      }\n    } else if (currentType === \"INDI\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"NAME\")) {\n        let nameVal = rest.replace(\"NAME\", \"\").trim();\n        const nameParts = nameVal.split(\"/\");\n        if (nameParts.length >= 2) {\n          currentRecord.firstName = nameParts[0].trim();\n          currentRecord.lastName = nameParts[1].trim();\n        } else {\n          currentRecord.firstName = nameVal;\n        }\n      } else if (rest.startsWith(\"GIVN\")) {\n        currentRecord.firstName = rest.replace(\"GIVN\", \"\").trim();\n      } else if (rest.startsWith(\"SURN\")) {\n        currentRecord.lastName = rest.replace(\"SURN\", \"\").trim();\n      } else if (rest.startsWith(\"BIRT\")) {\n      } else if (rest.startsWith(\"DEAT\")) {\n      } else if (rest.startsWith(\"DATE\")) {\n        if (line.includes(\"BIRT\")) {\n          currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n        } else if (line.includes(\"DEAT\")) {\n          currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n        } else {\n          if (!currentRecord.birthDate) {\n            currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n          } else {\n            currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n          }\n        }\n      }\n    } else if (currentType === \"FAM\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"HUSB\") || rest.startsWith(\"WIFE\") || rest.startsWith(\"CHIL\")) {\n        const tokens = rest.split(\" \");\n        const refId = tokens[1] ? tokens[1].replace(/^@|@$/g, \"\") : null;\n        if (rest.startsWith(\"HUSB\")) currentRecord.husb = refId;\n        else if (rest.startsWith(\"WIFE\")) currentRecord.wife = refId;\n        else if (rest.startsWith(\"CHIL\")) currentRecord.children.push(refId);\n      }\n    }\n  });\n  finishRecord();\n  Object.values(familiesById).forEach((fam) => {\n    const father = fam.husb;\n    const mother = fam.wife;\n    fam.children.forEach((childId) => {\n      if (peopleById[childId]) {\n        peopleById[childId].parents = [];\n        if (father) peopleById[childId].parents.push(father);\n        if (mother) peopleById[childId].parents.push(mother);\n      }\n    });\n  });\n  console.log(\"Final peopleById:\", peopleById);\n  console.log(\"Final familiesById:\", familiesById);\n  console.log(\"Final number of people:\", Object.keys(peopleById).length);\n  console.log(\"Sample person:\", Object.values(peopleById)[0]);\n  return Object.values(peopleById);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}