{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/genealogyChartExp/my-genealogy-app/src/components/GenealogyChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport PersonEditForm from \"./PersonEditForm\";\n\n// Geometry\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RING_WIDTH = 60;\nconst ARC_PADDING = 0;\nconst CENTER_RADIUS = 30;\n\n// Text\nconst DEFAULT_FONT_SIZE = 8;\nconst LINE_SPACING = 10;\n\n/**\n * Create a color scale from very dark green (#002200) to a lighter green (#99ff99).\n */\nfunction createColorScale(maxGenerations) {\n  return d3.scaleLinear().domain([0, maxGenerations - 1]).range([\"#002200\", \"#99ff99\"]);\n}\nfunction getTextColorForBackground(backgroundColor) {\n  let r, g, b;\n  if (backgroundColor.startsWith('#')) {\n    // Handle hex format\n    r = parseInt(backgroundColor.slice(1, 3), 16);\n    g = parseInt(backgroundColor.slice(3, 5), 16);\n    b = parseInt(backgroundColor.slice(5, 7), 16);\n  } else if (backgroundColor.startsWith('rgb')) {\n    // Handle rgb format\n    const matches = backgroundColor.match(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/);\n    if (matches) {\n      [, r, g, b] = matches.map(Number);\n    } else {\n      console.error('Invalid RGB format:', backgroundColor);\n      return '#ffffff';\n    }\n  } else {\n    console.error('Unsupported color format:', backgroundColor);\n    return '#ffffff';\n  }\n\n  // Calculate brightness using W3C formula\n  const brightness = Math.round((r * 299 + g * 587 + b * 114) / 1000);\n  console.log(`RGB: ${r},${g},${b}, Brightness: ${brightness}`);\n  return brightness > 125 ? \"#003300\" : \"#ffffff\";\n}\nexport default function GenealogyChart({\n  people,\n  maxGenerations,\n  centerPersonId,\n  onUpdatePeople,\n  onSetCenter // Add this prop\n}) {\n  _s();\n  const [selectedPersonId, setSelectedPersonId] = useState(null);\n  const svgRef = useRef(null);\n  useEffect(() => {\n    drawChart();\n  }, [people, maxGenerations, centerPersonId]);\n  function approximateTextWidth(str, fontSize = DEFAULT_FONT_SIZE) {\n    const avgCharWidth = fontSize * 0.6;\n    return str.length * avgCharWidth;\n  }\n  function wrapTextToWidth(str, arcLength, fontSize = DEFAULT_FONT_SIZE) {\n    const words = str.split(\" \");\n    const lines = [];\n    let currentLineWords = [];\n    for (let i = 0; i < words.length; i++) {\n      const testLine = [...currentLineWords, words[i]].join(\" \");\n      const testWidth = approximateTextWidth(testLine, fontSize);\n      if (testWidth <= arcLength) {\n        currentLineWords.push(words[i]);\n      } else {\n        lines.push(currentLineWords.join(\" \"));\n        currentLineWords = [words[i]];\n      }\n    }\n    if (currentLineWords.length > 0) {\n      lines.push(currentLineWords.join(\" \"));\n    }\n    return lines;\n  }\n\n  // Update geometry constants\n  const CENTER_RADIUS = 30;\n  const BASE_RING_WIDTH = 30; // Width for second generation\n  const RING_WIDTH_INCREMENT = 15; // Amount to add for each generation\n  const ARC_PADDING = 0;\n\n  // Calculate ring width for a given generation\n  function getRingWidth(generation) {\n    if (generation === 0) return CENTER_RADIUS;\n    return BASE_RING_WIDTH + (generation - 1) * RING_WIDTH_INCREMENT;\n  }\n\n  // Calculate inner radius for a given generation\n  function getInnerRadius(generation) {\n    if (generation === 0) return 0;\n    if (generation === 1) return CENTER_RADIUS;\n\n    // For generation > 1, sum up all previous ring widths\n    return [...Array(generation - 1)].reduce((sum, _, idx) => sum + getRingWidth(idx + 1), CENTER_RADIUS);\n  }\n  function drawChart() {\n    const width = 800;\n    const height = 800;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n    const svg = d3.select(svgRef.current).attr(\"width\", width).attr(\"height\", height);\n    const colorScale = createColorScale(maxGenerations);\n    const peopleMap = new Map(people.map(p => [p.id, p]));\n    const ancestors = [];\n    for (let i = 0; i < maxGenerations; i++) {\n      ancestors[i] = new Array(2 ** i).fill(null);\n    }\n    ancestors[0][0] = centerPersonId;\n    for (let i = 0; i < maxGenerations - 1; i++) {\n      const size = 2 ** i;\n      for (let j = 0; j < size; j++) {\n        const pid = ancestors[i][j];\n        if (!pid) continue;\n        const person = peopleMap.get(pid);\n        if (!person) continue;\n        if (person.parents && person.parents.length > 0) {\n          ancestors[i + 1][2 * j] = person.parents[0] || null;\n        }\n        if (person.parents && person.parents.length > 1) {\n          ancestors[i + 1][2 * j + 1] = person.parents[1] || null;\n        }\n      }\n    }\n    const centerPerson = peopleMap.get(centerPersonId);\n    const centerBgColor = colorScale(0);\n    svg.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", CENTER_RADIUS).attr(\"fill\", centerBgColor).attr(\"stroke\", \"#333\").on(\"click\", event => {\n      event.stopPropagation(); // Add this\n      setSelectedPersonId(centerPersonId);\n    });\n    console.log('Center color:', centerBgColor, 'Text color:', getTextColorForBackground(centerBgColor));\n    svg.append(\"text\").attr(\"x\", centerX).attr(\"y\", centerY + 4).attr(\"text-anchor\", \"middle\").style(\"font-size\", DEFAULT_FONT_SIZE + \"px\").style(\"fill\", getTextColorForBackground(centerBgColor)).text(centerPerson ? centerPerson.firstName + \" \" + centerPerson.lastName : \"Unknown\");\n    for (let i = 1; i < maxGenerations; i++) {\n      const genArray = ancestors[i];\n      const segmentCount = 2 ** i;\n      const arcAngle = 2 * Math.PI / segmentCount - ARC_PADDING * Math.PI / 180;\n      const ringWidth = getRingWidth(i);\n      const innerRadius = getInnerRadius(i);\n      const outerRadius = innerRadius + ringWidth;\n      const arcFillColor = colorScale(i);\n      for (let k = 0; k < segmentCount; k++) {\n        const personId = genArray[k];\n        const startAngle = k * (2 * Math.PI / segmentCount);\n        const endAngle = startAngle + arcAngle;\n        const arcGenerator = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle);\n        if (!personId) {\n          svg.append(\"path\").attr(\"transform\", `translate(${centerX},${centerY})`).attr(\"d\", arcGenerator).attr(\"fill\", \"#eee\").attr(\"stroke\", \"#ccc\");\n          continue;\n        }\n        svg.append(\"path\").attr(\"transform\", `translate(${centerX},${centerY})`).attr(\"d\", arcGenerator).attr(\"fill\", arcFillColor).attr(\"stroke\", \"#333\").on(\"click\", event => {\n          event.stopPropagation(); // Add this\n          setSelectedPersonId(personId);\n        });\n        let label = \"Unknown\";\n        const person = peopleMap.get(personId);\n        if (person) {\n          label = person.firstName + \" \" + person.lastName + \" (\" + person.birthDate + \" - \" + person.deathDate + \")\";\n        }\n        const midRadius = (innerRadius + outerRadius) / 2;\n        const angleDiff = Math.abs(endAngle - startAngle);\n        const arcLength = angleDiff * midRadius;\n        const lines = wrapTextToWidth(label, arcLength, DEFAULT_FONT_SIZE);\n        const numLines = lines.length;\n        const totalHeight = (numLines - 1) * LINE_SPACING;\n        // Now, line 0 will be the outermost line and subsequent lines are placed inward\n        const outermostRadius = midRadius + totalHeight / 2;\n        lines.forEach((lineText, idx) => {\n          const lineRadius = outermostRadius - idx * LINE_SPACING;\n          const lineArcGen = d3.arc().innerRadius(lineRadius).outerRadius(lineRadius).startAngle(startAngle).endAngle(endAngle);\n          const textPathId = `textPath-${i}-${k}-line${idx}`;\n          svg.append(\"defs\").append(\"path\").attr(\"id\", textPathId).attr(\"transform\", `translate(${centerX},${centerY})`).attr(\"d\", lineArcGen());\n          const lineArcLength = angleDiff * lineRadius;\n          svg.append(\"text\").style(\"font-size\", DEFAULT_FONT_SIZE + \"px\").style(\"fill\", getTextColorForBackground(arcFillColor)).append(\"textPath\").attr(\"xlink:href\", \"#\" + textPathId).attr(\"startOffset\", lineArcLength / 2 + \"px\").style(\"text-anchor\", \"middle\").text(lineText);\n        });\n      }\n    }\n  }\n\n  // Remove the SVG background click handler\n  useEffect(() => {\n    const handleBackgroundClick = e => {\n      // Only close if clicking directly on the container div\n      if (e.target === e.currentTarget) {\n        setSelectedPersonId(null);\n      }\n    };\n\n    // Add click handler to the container div instead of SVG\n    const container = document.querySelector('.genealogy-container');\n    if (container) {\n      container.addEventListener('click', handleBackgroundClick);\n      return () => container.removeEventListener('click', handleBackgroundClick);\n    }\n  }, []);\n  const selectedPerson = people.find(p => p.id === selectedPersonId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"genealogy-container\",\n    style: {\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), selectedPerson && /*#__PURE__*/_jsxDEV(PersonEditForm, {\n      person: selectedPerson,\n      onSave: (updatedPerson, isNew) => {\n        onUpdatePeople(prev => {\n          if (isNew) {\n            return [...prev, updatedPerson];\n          }\n          return prev.map(p => p.id === updatedPerson.id ? updatedPerson : p);\n        });\n      },\n      onClose: () => setSelectedPersonId(null),\n      onSetCenter: id => {\n        onSetCenter(id);\n        setSelectedPersonId(null);\n      },\n      allPeople: people\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n}\n_s(GenealogyChart, \"lFcEb/Ezw5Y1Yzqet71F8/NZaJw=\");\n_c = GenealogyChart;\nvar _c;\n$RefreshReg$(_c, \"GenealogyChart\");","map":{"version":3,"names":["React","useState","useRef","useEffect","d3","PersonEditForm","jsxDEV","_jsxDEV","RING_WIDTH","ARC_PADDING","CENTER_RADIUS","DEFAULT_FONT_SIZE","LINE_SPACING","createColorScale","maxGenerations","scaleLinear","domain","range","getTextColorForBackground","backgroundColor","r","g","b","startsWith","parseInt","slice","matches","match","map","Number","console","error","brightness","Math","round","log","GenealogyChart","people","centerPersonId","onUpdatePeople","onSetCenter","_s","selectedPersonId","setSelectedPersonId","svgRef","drawChart","approximateTextWidth","str","fontSize","avgCharWidth","length","wrapTextToWidth","arcLength","words","split","lines","currentLineWords","i","testLine","join","testWidth","push","BASE_RING_WIDTH","RING_WIDTH_INCREMENT","getRingWidth","generation","getInnerRadius","Array","reduce","sum","_","idx","width","height","centerX","centerY","select","current","selectAll","remove","svg","attr","colorScale","peopleMap","Map","p","id","ancestors","fill","size","j","pid","person","get","parents","centerPerson","centerBgColor","append","on","event","stopPropagation","style","text","firstName","lastName","genArray","segmentCount","arcAngle","PI","ringWidth","innerRadius","outerRadius","arcFillColor","k","personId","startAngle","endAngle","arcGenerator","arc","label","birthDate","deathDate","midRadius","angleDiff","abs","numLines","totalHeight","outermostRadius","forEach","lineText","lineRadius","lineArcGen","textPathId","lineArcLength","handleBackgroundClick","e","target","currentTarget","container","document","querySelector","addEventListener","removeEventListener","selectedPerson","find","className","position","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onSave","updatedPerson","isNew","prev","onClose","allPeople","_c","$RefreshReg$"],"sources":["/Users/ryan/genealogyChartExp/my-genealogy-app/src/components/GenealogyChart.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport PersonEditForm from \"./PersonEditForm\";\n\n// Geometry\nconst RING_WIDTH = 60;\nconst ARC_PADDING = 0;\nconst CENTER_RADIUS = 30;\n\n// Text\nconst DEFAULT_FONT_SIZE = 8;\nconst LINE_SPACING = 10;\n\n/**\n * Create a color scale from very dark green (#002200) to a lighter green (#99ff99).\n */\nfunction createColorScale(maxGenerations) {\n  return d3.scaleLinear()\n    .domain([0, maxGenerations - 1])\n    .range([\"#002200\", \"#99ff99\"]);\n}\n\nfunction getTextColorForBackground(backgroundColor) {\n  let r, g, b;\n  \n  if (backgroundColor.startsWith('#')) {\n    // Handle hex format\n    r = parseInt(backgroundColor.slice(1, 3), 16);\n    g = parseInt(backgroundColor.slice(3, 5), 16);\n    b = parseInt(backgroundColor.slice(5, 7), 16);\n  } else if (backgroundColor.startsWith('rgb')) {\n    // Handle rgb format\n    const matches = backgroundColor.match(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/);\n    if (matches) {\n      [, r, g, b] = matches.map(Number);\n    } else {\n      console.error('Invalid RGB format:', backgroundColor);\n      return '#ffffff';\n    }\n  } else {\n    console.error('Unsupported color format:', backgroundColor);\n    return '#ffffff';\n  }\n  \n  // Calculate brightness using W3C formula\n  const brightness = Math.round(((r * 299) + (g * 587) + (b * 114)) / 1000);\n  console.log(`RGB: ${r},${g},${b}, Brightness: ${brightness}`);\n  \n  return brightness > 125 ? \"#003300\" : \"#ffffff\";\n}\n\nexport default function GenealogyChart({\n  people,\n  maxGenerations,\n  centerPersonId,\n  onUpdatePeople,\n  onSetCenter  // Add this prop\n}) {\n  const [selectedPersonId, setSelectedPersonId] = useState(null);\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    drawChart();\n  }, [people, maxGenerations, centerPersonId]);\n\n  function approximateTextWidth(str, fontSize = DEFAULT_FONT_SIZE) {\n    const avgCharWidth = fontSize * 0.6;\n    return str.length * avgCharWidth;\n  }\n\n  function wrapTextToWidth(str, arcLength, fontSize = DEFAULT_FONT_SIZE) {\n    const words = str.split(\" \");\n    const lines = [];\n    let currentLineWords = [];\n    for (let i = 0; i < words.length; i++) {\n      const testLine = [...currentLineWords, words[i]].join(\" \");\n      const testWidth = approximateTextWidth(testLine, fontSize);\n      if (testWidth <= arcLength) {\n        currentLineWords.push(words[i]);\n      } else {\n        lines.push(currentLineWords.join(\" \"));\n        currentLineWords = [words[i]];\n      }\n    }\n    if (currentLineWords.length > 0) {\n      lines.push(currentLineWords.join(\" \"));\n    }\n    return lines;\n  }\n\n// Update geometry constants\nconst CENTER_RADIUS = 30;\nconst BASE_RING_WIDTH = 30;  // Width for second generation\nconst RING_WIDTH_INCREMENT = 15;  // Amount to add for each generation\nconst ARC_PADDING = 0;\n\n// Calculate ring width for a given generation\nfunction getRingWidth(generation) {\n  if (generation === 0) return CENTER_RADIUS;\n  return BASE_RING_WIDTH + (generation - 1) * RING_WIDTH_INCREMENT;\n}\n\n// Calculate inner radius for a given generation\nfunction getInnerRadius(generation) {\n  if (generation === 0) return 0;\n  if (generation === 1) return CENTER_RADIUS;\n  \n  // For generation > 1, sum up all previous ring widths\n  return [...Array(generation - 1)]\n    .reduce((sum, _, idx) => sum + getRingWidth(idx + 1), CENTER_RADIUS);\n}\n\n  function drawChart() {\n    const width = 800;\n    const height = 800;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n    const svg = d3.select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n    const colorScale = createColorScale(maxGenerations);\n    const peopleMap = new Map(people.map((p) => [p.id, p]));\n    const ancestors = [];\n    for (let i = 0; i < maxGenerations; i++) {\n      ancestors[i] = new Array(2 ** i).fill(null);\n    }\n    ancestors[0][0] = centerPersonId;\n    for (let i = 0; i < maxGenerations - 1; i++) {\n      const size = 2 ** i;\n      for (let j = 0; j < size; j++) {\n        const pid = ancestors[i][j];\n        if (!pid) continue;\n        const person = peopleMap.get(pid);\n        if (!person) continue;\n        if (person.parents && person.parents.length > 0) {\n          ancestors[i + 1][2 * j] = person.parents[0] || null;\n        }\n        if (person.parents && person.parents.length > 1) {\n          ancestors[i + 1][2 * j + 1] = person.parents[1] || null;\n        }\n      }\n    }\n    const centerPerson = peopleMap.get(centerPersonId);\n    const centerBgColor = colorScale(0);\n    svg.append(\"circle\")\n      .attr(\"cx\", centerX)\n      .attr(\"cy\", centerY)\n      .attr(\"r\", CENTER_RADIUS)\n      .attr(\"fill\", centerBgColor)\n      .attr(\"stroke\", \"#333\")\n      .on(\"click\", (event) => { \n        event.stopPropagation();  // Add this\n        setSelectedPersonId(centerPersonId);\n      });\n    \n    console.log('Center color:', centerBgColor, 'Text color:', getTextColorForBackground(centerBgColor));\n    \n    svg.append(\"text\")\n      .attr(\"x\", centerX)\n      .attr(\"y\", centerY + 4)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", DEFAULT_FONT_SIZE + \"px\")\n      .style(\"fill\", getTextColorForBackground(centerBgColor))\n      .text(centerPerson ? centerPerson.firstName + \" \" + centerPerson.lastName : \"Unknown\");\n    for (let i = 1; i < maxGenerations; i++) {\n      const genArray = ancestors[i];\n      const segmentCount = 2 ** i;\n      const arcAngle = (2 * Math.PI) / segmentCount - (ARC_PADDING * Math.PI) / 180;\n      const ringWidth = getRingWidth(i);\n      const innerRadius = getInnerRadius(i);\n      const outerRadius = innerRadius + ringWidth;\n      const arcFillColor = colorScale(i);\n      for (let k = 0; k < segmentCount; k++) {\n        const personId = genArray[k];\n        const startAngle = k * ((2 * Math.PI) / segmentCount);\n        const endAngle = startAngle + arcAngle;\n        const arcGenerator = d3.arc()\n          .innerRadius(innerRadius)\n          .outerRadius(outerRadius)\n          .startAngle(startAngle)\n          .endAngle(endAngle);\n        if (!personId) {\n          svg.append(\"path\")\n            .attr(\"transform\", `translate(${centerX},${centerY})`)\n            .attr(\"d\", arcGenerator)\n            .attr(\"fill\", \"#eee\")\n            .attr(\"stroke\", \"#ccc\");\n          continue;\n        }\n        svg.append(\"path\")\n          .attr(\"transform\", `translate(${centerX},${centerY})`)\n          .attr(\"d\", arcGenerator)\n          .attr(\"fill\", arcFillColor)\n          .attr(\"stroke\", \"#333\")\n          .on(\"click\", (event) => {\n            event.stopPropagation();  // Add this\n            setSelectedPersonId(personId);\n          });\n        let label = \"Unknown\";\n        const person = peopleMap.get(personId);\n        if (person) {\n          label = person.firstName + \" \" + person.lastName + \" (\" + person.birthDate + \" - \" + person.deathDate + \")\";\n        }\n        const midRadius = (innerRadius + outerRadius) / 2;\n        const angleDiff = Math.abs(endAngle - startAngle);\n        const arcLength = angleDiff * midRadius;\n        const lines = wrapTextToWidth(label, arcLength, DEFAULT_FONT_SIZE);\n        const numLines = lines.length;\n        const totalHeight = (numLines - 1) * LINE_SPACING;\n        // Now, line 0 will be the outermost line and subsequent lines are placed inward\n        const outermostRadius = midRadius + totalHeight / 2;\n        lines.forEach((lineText, idx) => {\n          const lineRadius = outermostRadius - idx * LINE_SPACING;\n          const lineArcGen = d3.arc()\n            .innerRadius(lineRadius)\n            .outerRadius(lineRadius)\n            .startAngle(startAngle)\n            .endAngle(endAngle);\n          const textPathId = `textPath-${i}-${k}-line${idx}`;\n          svg.append(\"defs\")\n            .append(\"path\")\n            .attr(\"id\", textPathId)\n            .attr(\"transform\", `translate(${centerX},${centerY})`)\n            .attr(\"d\", lineArcGen());\n          const lineArcLength = angleDiff * lineRadius;\n          svg.append(\"text\")\n            .style(\"font-size\", DEFAULT_FONT_SIZE + \"px\")\n            .style(\"fill\", getTextColorForBackground(arcFillColor))\n            .append(\"textPath\")\n            .attr(\"xlink:href\", \"#\" + textPathId)\n            .attr(\"startOffset\", (lineArcLength / 2) + \"px\")\n            .style(\"text-anchor\", \"middle\")\n            .text(lineText);\n        });\n      }\n    }\n  }\n\n  // Remove the SVG background click handler\n  useEffect(() => {\n    const handleBackgroundClick = (e) => {\n      // Only close if clicking directly on the container div\n      if (e.target === e.currentTarget) {\n        setSelectedPersonId(null);\n      }\n    };\n\n    // Add click handler to the container div instead of SVG\n    const container = document.querySelector('.genealogy-container');\n    if (container) {\n      container.addEventListener('click', handleBackgroundClick);\n      return () => container.removeEventListener('click', handleBackgroundClick);\n    }\n  }, []);\n\n  const selectedPerson = people.find((p) => p.id === selectedPersonId);\n\n  return (\n    <div className=\"genealogy-container\" style={{ position: \"relative\" }}>\n      <svg ref={svgRef}></svg>\n      {selectedPerson && (\n        <PersonEditForm\n          person={selectedPerson}\n          onSave={(updatedPerson, isNew) => {\n            onUpdatePeople(prev => {\n              if (isNew) {\n                return [...prev, updatedPerson];\n              }\n              return prev.map(p => p.id === updatedPerson.id ? updatedPerson : p);\n            });\n          }}\n          onClose={() => setSelectedPersonId(null)}\n          onSetCenter={(id) => {\n            onSetCenter(id);\n            setSelectedPersonId(null);\n          }}\n          allPeople={people}\n        />\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}