{"ast":null,"code":"export async function importGedcomFile(file) {\n  const text = await file.text();\n  const peopleById = {};\n  const familiesById = {};\n  let currentRecord = null;\n  let currentType = null;\n  const lines = text.split(/\\\\r?\\\\n/);\n  function finishRecord() {\n    if (!currentRecord || !currentType) return;\n    if (currentType === \"INDI\") {\n      peopleById[currentRecord.id] = currentRecord;\n    } else if (currentType === \"FAM\") {\n      familiesById[currentRecord.id] = currentRecord;\n    }\n    currentRecord = null;\n    currentType = null;\n  }\n  lines.forEach(line => {\n    const parts = line.trim().split(\" \");\n    if (parts.length < 2) return;\n    const level = parts[0];\n    const tagOrId = parts[1];\n    if (level === \"0\" && tagOrId.startsWith(\"@\") && parts.length >= 3) {\n      const recordType = parts[2];\n      finishRecord();\n      if (recordType === \"INDI\") {\n        currentRecord = {\n          id: tagOrId,\n          firstName: \"\",\n          lastName: \"\",\n          birthDate: \"\",\n          deathDate: \"\",\n          parents: []\n        };\n        currentType = \"INDI\";\n      } else if (recordType === \"FAM\") {\n        currentRecord = {\n          id: tagOrId,\n          husb: null,\n          wife: null,\n          children: []\n        };\n        currentType = \"FAM\";\n      }\n    } else if (currentType === \"INDI\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"NAME\")) {\n        let nameVal = rest.replace(\"NAME\", \"\").trim();\n        const nameParts = nameVal.split(\"/\");\n        if (nameParts.length >= 2) {\n          currentRecord.firstName = nameParts[0].trim();\n          currentRecord.lastName = nameParts[1].trim();\n        } else {\n          currentRecord.firstName = nameVal;\n        }\n      } else if (rest.startsWith(\"GIVN\")) {\n        currentRecord.firstName = rest.replace(\"GIVN\", \"\").trim();\n      } else if (rest.startsWith(\"SURN\")) {\n        currentRecord.lastName = rest.replace(\"SURN\", \"\").trim();\n      } else if (rest.startsWith(\"BIRT\")) {} else if (rest.startsWith(\"DEAT\")) {} else if (rest.startsWith(\"DATE\")) {\n        if (line.includes(\"BIRT\")) {\n          currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n        } else if (line.includes(\"DEAT\")) {\n          currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n        } else {\n          if (!currentRecord.birthDate) {\n            currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n          } else {\n            currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n          }\n        }\n      }\n    } else if (currentType === \"FAM\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"HUSB\")) {\n        const tokens = rest.split(\" \");\n        if (tokens.length >= 2) {\n          currentRecord.husb = tokens[1];\n        }\n      } else if (rest.startsWith(\"WIFE\")) {\n        const tokens = rest.split(\" \");\n        if (tokens.length >= 2) {\n          currentRecord.wife = tokens[1];\n        }\n      } else if (rest.startsWith(\"CHIL\")) {\n        const tokens = rest.split(\" \");\n        if (tokens.length >= 2) {\n          currentRecord.children.push(tokens[1]);\n        }\n      }\n    }\n  });\n  finishRecord();\n  Object.values(familiesById).forEach(fam => {\n    const father = fam.husb;\n    const mother = fam.wife;\n    fam.children.forEach(childId => {\n      if (peopleById[childId]) {\n        peopleById[childId].parents = [];\n        if (father) peopleById[childId].parents.push(father);\n        if (mother) peopleById[childId].parents.push(mother);\n      }\n    });\n  });\n  return Object.values(peopleById);\n}","map":{"version":3,"names":["importGedcomFile","file","text","peopleById","familiesById","currentRecord","currentType","lines","split","finishRecord","id","forEach","line","parts","trim","length","level","tagOrId","startsWith","recordType","firstName","lastName","birthDate","deathDate","parents","husb","wife","children","rest","substring","nameVal","replace","nameParts","includes","tokens","push","Object","values","fam","father","mother","childId"],"sources":["/Users/ryan/genealogyChartExp/my-genealogy-app/src/gedcom/importGedcom.js"],"sourcesContent":["export async function importGedcomFile(file) {\n  const text = await file.text();\n  const peopleById = {};\n  const familiesById = {};\n  let currentRecord = null;\n  let currentType = null;\n  const lines = text.split(/\\\\r?\\\\n/);\n\n  function finishRecord() {\n    if (!currentRecord || !currentType) return;\n    if (currentType === \"INDI\") {\n      peopleById[currentRecord.id] = currentRecord;\n    } else if (currentType === \"FAM\") {\n      familiesById[currentRecord.id] = currentRecord;\n    }\n    currentRecord = null;\n    currentType = null;\n  }\n\n  lines.forEach((line) => {\n    const parts = line.trim().split(\" \");\n    if (parts.length < 2) return;\n    const level = parts[0];\n    const tagOrId = parts[1];\n\n    if (level === \"0\" && tagOrId.startsWith(\"@\") && parts.length >= 3) {\n      const recordType = parts[2];\n      finishRecord();\n      if (recordType === \"INDI\") {\n        currentRecord = { id: tagOrId, firstName: \"\", lastName: \"\", birthDate: \"\", deathDate: \"\", parents: [] };\n        currentType = \"INDI\";\n      } else if (recordType === \"FAM\") {\n        currentRecord = { id: tagOrId, husb: null, wife: null, children: [] };\n        currentType = \"FAM\";\n      }\n    } else if (currentType === \"INDI\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"NAME\")) {\n        let nameVal = rest.replace(\"NAME\", \"\").trim();\n        const nameParts = nameVal.split(\"/\");\n        if (nameParts.length >= 2) {\n          currentRecord.firstName = nameParts[0].trim();\n          currentRecord.lastName = nameParts[1].trim();\n        } else {\n          currentRecord.firstName = nameVal;\n        }\n      } else if (rest.startsWith(\"GIVN\")) {\n        currentRecord.firstName = rest.replace(\"GIVN\", \"\").trim();\n      } else if (rest.startsWith(\"SURN\")) {\n        currentRecord.lastName = rest.replace(\"SURN\", \"\").trim();\n      } else if (rest.startsWith(\"BIRT\")) {\n      } else if (rest.startsWith(\"DEAT\")) {\n      } else if (rest.startsWith(\"DATE\")) {\n        if (line.includes(\"BIRT\")) {\n          currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n        } else if (line.includes(\"DEAT\")) {\n          currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n        } else {\n          if (!currentRecord.birthDate) {\n            currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n          } else {\n            currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n          }\n        }\n      }\n    } else if (currentType === \"FAM\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"HUSB\")) {\n        const tokens = rest.split(\" \");\n        if (tokens.length >= 2) {\n          currentRecord.husb = tokens[1];\n        }\n      } else if (rest.startsWith(\"WIFE\")) {\n        const tokens = rest.split(\" \");\n        if (tokens.length >= 2) {\n          currentRecord.wife = tokens[1];\n        }\n      } else if (rest.startsWith(\"CHIL\")) {\n        const tokens = rest.split(\" \");\n        if (tokens.length >= 2) {\n          currentRecord.children.push(tokens[1]);\n        }\n      }\n    }\n  });\n  finishRecord();\n  Object.values(familiesById).forEach((fam) => {\n    const father = fam.husb;\n    const mother = fam.wife;\n    fam.children.forEach((childId) => {\n      if (peopleById[childId]) {\n        peopleById[childId].parents = [];\n        if (father) peopleById[childId].parents.push(father);\n        if (mother) peopleById[childId].parents.push(mother);\n      }\n    });\n  });\n  return Object.values(peopleById);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}