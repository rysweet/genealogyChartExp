{"ast":null,"code":"export async function importGedcomFile(file) {\n  const text = await file.text();\n  console.log(\"Raw file content:\", text.substring(0, 200) + \"...\"); // Show first 200 chars\n\n  const peopleById = {};\n  const familiesById = {};\n  let currentRecord = null;\n  let currentType = null;\n\n  // Fix the line splitting - remove escaped characters\n  const lines = text.split(/\\r?\\n/);\n  console.log(\"Number of lines split:\", lines.length);\n  function finishRecord() {\n    if (!currentRecord || !currentType) return;\n    if (currentType === \"INDI\") {\n      console.log(\"Parsed individual:\", currentRecord);\n      peopleById[currentRecord.id] = currentRecord;\n    } else if (currentType === \"FAM\") {\n      console.log(\"Parsed family:\", currentRecord);\n      familiesById[currentRecord.id] = currentRecord;\n    }\n    currentRecord = null;\n    currentType = null;\n  }\n\n  // First pass: Create all people\n  lines.forEach((line, index) => {\n    console.log(`Line ${index}:`, line);\n    const parts = line.trim().split(\" \");\n    if (parts.length < 2) return;\n    const level = parts[0];\n    const tagOrId = parts[1];\n    if (level === \"0\" && tagOrId.startsWith(\"@\") && parts.length >= 3) {\n      const recordType = parts[2];\n      finishRecord();\n      const cleanedId = tagOrId.replace(/^@|@$/g, \"\");\n      if (recordType === \"INDI\") {\n        currentRecord = {\n          id: cleanedId,\n          firstName: \"\",\n          lastName: \"\",\n          birthDate: \"\",\n          deathDate: \"\",\n          parents: [],\n          families: [] // Track which families this person belongs to\n        };\n        currentType = \"INDI\";\n      } else if (recordType === \"FAM\") {\n        currentRecord = {\n          id: cleanedId,\n          husb: null,\n          wife: null,\n          children: []\n        };\n        currentType = \"FAM\";\n      }\n    } else if (currentType === \"INDI\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"NAME\")) {\n        let nameVal = rest.replace(\"NAME\", \"\").trim();\n        const nameParts = nameVal.split(\"/\");\n        if (nameParts.length >= 2) {\n          currentRecord.firstName = nameParts[0].trim();\n          currentRecord.lastName = nameParts[1].trim();\n        } else {\n          currentRecord.firstName = nameVal;\n        }\n      } else if (rest.startsWith(\"GIVN\")) {\n        currentRecord.firstName = rest.replace(\"GIVN\", \"\").trim();\n      } else if (rest.startsWith(\"SURN\")) {\n        currentRecord.lastName = rest.replace(\"SURN\", \"\").trim();\n      } else if (rest.startsWith(\"BIRT\")) {} else if (rest.startsWith(\"DEAT\")) {} else if (rest.startsWith(\"DATE\")) {\n        if (line.includes(\"BIRT\")) {\n          currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n        } else if (line.includes(\"DEAT\")) {\n          currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n        } else {\n          if (!currentRecord.birthDate) {\n            currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n          } else {\n            currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n          }\n        }\n      }\n    } else if (currentType === \"FAM\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"HUSB\") || rest.startsWith(\"WIFE\") || rest.startsWith(\"CHIL\")) {\n        const tokens = rest.split(\" \");\n        const refId = tokens[1] ? tokens[1].replace(/^@|@$/g, \"\") : null;\n        if (rest.startsWith(\"HUSB\")) currentRecord.husb = refId;else if (rest.startsWith(\"WIFE\")) currentRecord.wife = refId;else if (rest.startsWith(\"CHIL\")) currentRecord.children.push(refId);\n      }\n    }\n  });\n  finishRecord();\n\n  // Second pass: Establish all relationships\n  Object.values(familiesById).forEach(fam => {\n    const father = fam.husb;\n    const mother = fam.wife;\n\n    // Add family reference to parents\n    if (father && peopleById[father]) {\n      peopleById[father].families.push(fam.id);\n    }\n    if (mother && peopleById[mother]) {\n      peopleById[mother].families.push(fam.id);\n    }\n\n    // Add parents to children\n    fam.children.forEach(childId => {\n      if (peopleById[childId]) {\n        peopleById[childId].parents = [];\n        if (father) peopleById[childId].parents.push(father);\n        if (mother) peopleById[childId].parents.push(mother);\n      }\n    });\n  });\n  console.log(\"People with relationships:\", peopleById);\n  return Object.values(peopleById);\n}","map":{"version":3,"names":["importGedcomFile","file","text","console","log","substring","peopleById","familiesById","currentRecord","currentType","lines","split","length","finishRecord","id","forEach","line","index","parts","trim","level","tagOrId","startsWith","recordType","cleanedId","replace","firstName","lastName","birthDate","deathDate","parents","families","husb","wife","children","rest","nameVal","nameParts","includes","tokens","refId","push","Object","values","fam","father","mother","childId"],"sources":["/Users/ryan/genealogyChartExp/my-genealogy-app/src/gedcom/importGedcom.js"],"sourcesContent":["export async function importGedcomFile(file) {\n  const text = await file.text();\n  console.log(\"Raw file content:\", text.substring(0, 200) + \"...\"); // Show first 200 chars\n  \n  const peopleById = {};\n  const familiesById = {};\n  let currentRecord = null;\n  let currentType = null;\n  \n  // Fix the line splitting - remove escaped characters\n  const lines = text.split(/\\r?\\n/);\n  console.log(\"Number of lines split:\", lines.length);\n\n  function finishRecord() {\n    if (!currentRecord || !currentType) return;\n    if (currentType === \"INDI\") {\n      console.log(\"Parsed individual:\", currentRecord);\n      peopleById[currentRecord.id] = currentRecord;\n    } else if (currentType === \"FAM\") {\n      console.log(\"Parsed family:\", currentRecord);\n      familiesById[currentRecord.id] = currentRecord;\n    }\n    currentRecord = null;\n    currentType = null;\n  }\n\n  // First pass: Create all people\n  lines.forEach((line, index) => {\n    console.log(`Line ${index}:`, line);\n    const parts = line.trim().split(\" \");\n    if (parts.length < 2) return;\n    const level = parts[0];\n    const tagOrId = parts[1];\n\n    if (level === \"0\" && tagOrId.startsWith(\"@\") && parts.length >= 3) {\n      const recordType = parts[2];\n      finishRecord();\n      const cleanedId = tagOrId.replace(/^@|@$/g, \"\");\n      if (recordType === \"INDI\") {\n        currentRecord = { \n          id: cleanedId, \n          firstName: \"\", \n          lastName: \"\", \n          birthDate: \"\", \n          deathDate: \"\", \n          parents: [],\n          families: [] // Track which families this person belongs to\n        };\n        currentType = \"INDI\";\n      } else if (recordType === \"FAM\") {\n        currentRecord = { \n          id: cleanedId, \n          husb: null, \n          wife: null, \n          children: [] \n        };\n        currentType = \"FAM\";\n      }\n    } else if (currentType === \"INDI\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"NAME\")) {\n        let nameVal = rest.replace(\"NAME\", \"\").trim();\n        const nameParts = nameVal.split(\"/\");\n        if (nameParts.length >= 2) {\n          currentRecord.firstName = nameParts[0].trim();\n          currentRecord.lastName = nameParts[1].trim();\n        } else {\n          currentRecord.firstName = nameVal;\n        }\n      } else if (rest.startsWith(\"GIVN\")) {\n        currentRecord.firstName = rest.replace(\"GIVN\", \"\").trim();\n      } else if (rest.startsWith(\"SURN\")) {\n        currentRecord.lastName = rest.replace(\"SURN\", \"\").trim();\n      } else if (rest.startsWith(\"BIRT\")) {\n      } else if (rest.startsWith(\"DEAT\")) {\n      } else if (rest.startsWith(\"DATE\")) {\n        if (line.includes(\"BIRT\")) {\n          currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n        } else if (line.includes(\"DEAT\")) {\n          currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n        } else {\n          if (!currentRecord.birthDate) {\n            currentRecord.birthDate = rest.replace(\"DATE\", \"\").trim();\n          } else {\n            currentRecord.deathDate = rest.replace(\"DATE\", \"\").trim();\n          }\n        }\n      }\n    } else if (currentType === \"FAM\") {\n      const rest = line.trim().substring(2).trim();\n      if (rest.startsWith(\"HUSB\") || rest.startsWith(\"WIFE\") || rest.startsWith(\"CHIL\")) {\n        const tokens = rest.split(\" \");\n        const refId = tokens[1] ? tokens[1].replace(/^@|@$/g, \"\") : null;\n        if (rest.startsWith(\"HUSB\")) currentRecord.husb = refId;\n        else if (rest.startsWith(\"WIFE\")) currentRecord.wife = refId;\n        else if (rest.startsWith(\"CHIL\")) currentRecord.children.push(refId);\n      }\n    }\n  });\n  finishRecord();\n\n  // Second pass: Establish all relationships\n  Object.values(familiesById).forEach((fam) => {\n    const father = fam.husb;\n    const mother = fam.wife;\n\n    // Add family reference to parents\n    if (father && peopleById[father]) {\n      peopleById[father].families.push(fam.id);\n    }\n    if (mother && peopleById[mother]) {\n      peopleById[mother].families.push(fam.id);\n    }\n\n    // Add parents to children\n    fam.children.forEach((childId) => {\n      if (peopleById[childId]) {\n        peopleById[childId].parents = [];\n        if (father) peopleById[childId].parents.push(father);\n        if (mother) peopleById[childId].parents.push(mother);\n      }\n    });\n  });\n\n  console.log(\"People with relationships:\", peopleById);\n  return Object.values(peopleById);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}