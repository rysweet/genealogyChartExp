{"ast":null,"code":"export function exportGedcom(people) {\n  let gedcomText = \"0 HEAD\\n1 CHAR UTF-8\\n1 GEDC\\n2 VERS 7.0\\n\";\n\n  // First pass: Export all INDI records\n  people.forEach(person => {\n    gedcomText += `0 @${person.id}@ INDI\\n`;\n    gedcomText += `1 NAME ${person.firstName || \"\"} /${person.lastName || \"\"}/\\n`;\n    if (person.birthDate) {\n      gedcomText += \"1 BIRT\\n2 DATE \" + person.birthDate + \"\\n\";\n    }\n    if (person.deathDate) {\n      gedcomText += \"1 DEAT\\n2 DATE \" + person.deathDate + \"\\n\";\n    }\n    // Add FAMC (family where person is a child) references\n    if (person.parents && person.parents.length > 0) {\n      const famId = `F${person.parents.sort().join('_')}`;\n      gedcomText += `1 FAMC @${famId}@\\n`;\n    }\n    // Add FAMS (family where person is a spouse) references\n    if (person.families) {\n      person.families.forEach(famId => {\n        gedcomText += `1 FAMS @${famId}@\\n`;\n      });\n    }\n  });\n\n  // Second pass: Export FAM records\n  const processedFamilies = new Set();\n  people.forEach(person => {\n    if (person.parents && person.parents.length > 0) {\n      const familyId = `F${person.parents.sort().join('_')}`;\n      if (!processedFamilies.has(familyId)) {\n        processedFamilies.add(familyId);\n        gedcomText += `0 @${familyId}@ FAM\\n`;\n        // Add husband reference\n        if (person.parents[0]) {\n          gedcomText += `1 HUSB @${person.parents[0]}@\\n`;\n        }\n        // Add wife reference\n        if (person.parents[1]) {\n          gedcomText += `1 WIFE @${person.parents[1]}@\\n`;\n        }\n\n        // Add all children\n        people.forEach(potentialChild => {\n          if (potentialChild.parents && potentialChild.parents.length === person.parents.length && potentialChild.parents.every(p => person.parents.includes(p))) {\n            gedcomText += `1 CHIL @${potentialChild.id}@\\n`;\n          }\n        });\n      }\n    }\n  });\n  gedcomText += \"0 TRLR\\n\";\n  return gedcomText;\n}","map":{"version":3,"names":["exportGedcom","people","gedcomText","forEach","person","id","firstName","lastName","birthDate","deathDate","parents","length","famId","sort","join","families","processedFamilies","Set","familyId","has","add","potentialChild","every","p","includes"],"sources":["/Users/ryan/genealogyChartExp/my-genealogy-app/src/gedcom/exportGedcom.js"],"sourcesContent":["export function exportGedcom(people) {\n  let gedcomText = \"0 HEAD\\n1 CHAR UTF-8\\n1 GEDC\\n2 VERS 7.0\\n\";\n  \n  // First pass: Export all INDI records\n  people.forEach(person => {\n    gedcomText += `0 @${person.id}@ INDI\\n`;\n    gedcomText += `1 NAME ${person.firstName || \"\"} /${person.lastName || \"\"}/\\n`;\n    if (person.birthDate) {\n      gedcomText += \"1 BIRT\\n2 DATE \" + person.birthDate + \"\\n\";\n    }\n    if (person.deathDate) {\n      gedcomText += \"1 DEAT\\n2 DATE \" + person.deathDate + \"\\n\";\n    }\n    // Add FAMC (family where person is a child) references\n    if (person.parents && person.parents.length > 0) {\n      const famId = `F${person.parents.sort().join('_')}`;\n      gedcomText += `1 FAMC @${famId}@\\n`;\n    }\n    // Add FAMS (family where person is a spouse) references\n    if (person.families) {\n      person.families.forEach(famId => {\n        gedcomText += `1 FAMS @${famId}@\\n`;\n      });\n    }\n  });\n\n  // Second pass: Export FAM records\n  const processedFamilies = new Set();\n  \n  people.forEach(person => {\n    if (person.parents && person.parents.length > 0) {\n      const familyId = `F${person.parents.sort().join('_')}`;\n      \n      if (!processedFamilies.has(familyId)) {\n        processedFamilies.add(familyId);\n        \n        gedcomText += `0 @${familyId}@ FAM\\n`;\n        // Add husband reference\n        if (person.parents[0]) {\n          gedcomText += `1 HUSB @${person.parents[0]}@\\n`;\n        }\n        // Add wife reference\n        if (person.parents[1]) {\n          gedcomText += `1 WIFE @${person.parents[1]}@\\n`;\n        }\n        \n        // Add all children\n        people.forEach(potentialChild => {\n          if (potentialChild.parents &&\n              potentialChild.parents.length === person.parents.length &&\n              potentialChild.parents.every(p => person.parents.includes(p))) {\n            gedcomText += `1 CHIL @${potentialChild.id}@\\n`;\n          }\n        });\n      }\n    }\n  });\n\n  gedcomText += \"0 TRLR\\n\";\n  return gedcomText;\n}\n"],"mappings":"AAAA,OAAO,SAASA,YAAYA,CAACC,MAAM,EAAE;EACnC,IAAIC,UAAU,GAAG,4CAA4C;;EAE7D;EACAD,MAAM,CAACE,OAAO,CAACC,MAAM,IAAI;IACvBF,UAAU,IAAI,MAAME,MAAM,CAACC,EAAE,UAAU;IACvCH,UAAU,IAAI,UAAUE,MAAM,CAACE,SAAS,IAAI,EAAE,KAAKF,MAAM,CAACG,QAAQ,IAAI,EAAE,KAAK;IAC7E,IAAIH,MAAM,CAACI,SAAS,EAAE;MACpBN,UAAU,IAAI,iBAAiB,GAAGE,MAAM,CAACI,SAAS,GAAG,IAAI;IAC3D;IACA,IAAIJ,MAAM,CAACK,SAAS,EAAE;MACpBP,UAAU,IAAI,iBAAiB,GAAGE,MAAM,CAACK,SAAS,GAAG,IAAI;IAC3D;IACA;IACA,IAAIL,MAAM,CAACM,OAAO,IAAIN,MAAM,CAACM,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/C,MAAMC,KAAK,GAAG,IAAIR,MAAM,CAACM,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;MACnDZ,UAAU,IAAI,WAAWU,KAAK,KAAK;IACrC;IACA;IACA,IAAIR,MAAM,CAACW,QAAQ,EAAE;MACnBX,MAAM,CAACW,QAAQ,CAACZ,OAAO,CAACS,KAAK,IAAI;QAC/BV,UAAU,IAAI,WAAWU,KAAK,KAAK;MACrC,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;;EAEF;EACA,MAAMI,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAAC;EAEnChB,MAAM,CAACE,OAAO,CAACC,MAAM,IAAI;IACvB,IAAIA,MAAM,CAACM,OAAO,IAAIN,MAAM,CAACM,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/C,MAAMO,QAAQ,GAAG,IAAId,MAAM,CAACM,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;MAEtD,IAAI,CAACE,iBAAiB,CAACG,GAAG,CAACD,QAAQ,CAAC,EAAE;QACpCF,iBAAiB,CAACI,GAAG,CAACF,QAAQ,CAAC;QAE/BhB,UAAU,IAAI,MAAMgB,QAAQ,SAAS;QACrC;QACA,IAAId,MAAM,CAACM,OAAO,CAAC,CAAC,CAAC,EAAE;UACrBR,UAAU,IAAI,WAAWE,MAAM,CAACM,OAAO,CAAC,CAAC,CAAC,KAAK;QACjD;QACA;QACA,IAAIN,MAAM,CAACM,OAAO,CAAC,CAAC,CAAC,EAAE;UACrBR,UAAU,IAAI,WAAWE,MAAM,CAACM,OAAO,CAAC,CAAC,CAAC,KAAK;QACjD;;QAEA;QACAT,MAAM,CAACE,OAAO,CAACkB,cAAc,IAAI;UAC/B,IAAIA,cAAc,CAACX,OAAO,IACtBW,cAAc,CAACX,OAAO,CAACC,MAAM,KAAKP,MAAM,CAACM,OAAO,CAACC,MAAM,IACvDU,cAAc,CAACX,OAAO,CAACY,KAAK,CAACC,CAAC,IAAInB,MAAM,CAACM,OAAO,CAACc,QAAQ,CAACD,CAAC,CAAC,CAAC,EAAE;YACjErB,UAAU,IAAI,WAAWmB,cAAc,CAAChB,EAAE,KAAK;UACjD;QACF,CAAC,CAAC;MACJ;IACF;EACF,CAAC,CAAC;EAEFH,UAAU,IAAI,UAAU;EACxB,OAAOA,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}